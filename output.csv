Function Name,Param Names,Param Descriptions
a!flatten(),a!flatten(array),array: Array to be flattened. 
a!update(),"a!update(data, index, value)","data: A list, map, dictionary, CDT, or record containing data to be updated. index: The index or field at which to update the data. value: The new value to add or replace an existing value. "
append(),"append(array, value)",array: The array to modify. value: The value or values to append. 
index(),"index(data, index, default)","data: A homogeneous array, whose indexed value is expected. Can also be a dictionary, map, CDT, or Record. index: The index or array of indices of the data. Index can be an integer, text, or a record type field reference. default: The default value to be returned if the data or the index is invalid, e.g. if the data itself is empty or the index is not found in the data. The type of the default value must be the same as that of the elements of the data. This parameter is optional. "
insert(),"insert(array, value, index)",array: The array to modify. value: The value or values to insert. index: The index or array of indices at which the value should be inserted. 
joinarray(),"joinarray(array, separator)",array: An array of elements to be concatenated. separator: A string that will be inserted between each element of the given array. 
ldrop(),"ldrop(array, number)",array: The array to modify. number: The number of values to drop from the array. 
length(),length(array),array: The array in which to calculate the number of elements. 
rdrop(),"rdrop(array, number)",array: The array to modify. number: The number of values to drop from the array. 
remove(),"remove(array, index)",array: The array to modify. index: The one-based index or array of indices whose values should be removed. 
reverse(),reverse(array),array: The array to modify. 
updatearray(),"updatearray(array, index, value)",array: The array to modify. index: The one-based index or array of indices at which to update the array. value: The new value or values to add or replace existing values. 
where(),"where(booleanArray, default)",booleanArray: The array of Boolean values to test. default: The integer number or array of integer numbers to return if none of the values in the array are true. 
wherecontains(),"wherecontains(values, array)",values: The values to find. array: The array in which the values are found. 
bin2dec(),bin2dec(value),"value: Binary value as text to convert, such as 1100100. "
bin2hex(),"bin2hex(value, place)","value: Binary value as text to convert, such as 1100100. place: The number of places to return. "
bin2oct(),"bin2oct(value, place)","value: Binary value as text to convert, such as 1100100. place: The number of places to return. "
dec2bin(),"dec2bin(value, place)","value: Decimal value to convert, such as 123. place: The number of places to return. "
dec2hex(),"dec2hex(value, place)","value: Decimal value to convert, such as 123. place: The number of places to return. "
dec2oct(),"dec2oct(value, place)","value: Decimal value to convert, such as 123. place: The number of places to return. "
hex2bin(),"hex2bin(value, place)","value: Hex value as text to convert, such as A5. place: The number of places to return. "
hex2dec(),hex2dec(value),"value: Hex value as text to convert, such as A5. "
hex2oct(),"hex2oct(value, place)","value: Hex value as text to convert, such as A5. place: The number of places in the result. "
oct2bin(),"oct2bin(value, place)","value: Octal value as text to convert, such as 771. place: The number of places in the result. "
oct2dec(),oct2dec(value),"value: Octal value as text to convert, such as 771. "
oct2hex(),"oct2hex(value, place)","value: Octal value as text to convert, such as 771. place: The number of places to return. "
a!cmiCopyDocumentFromAppian(),"a!cmiCopyDocumentFromAppian(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, objectId, properties, appianDocument, appianDocumentVersion, appianDocumentAllowExpired)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. objectId: The object id of the CMIS folder to which the Appian document will be copied. properties: The CMIS document properties, given as a dictionary. The string ""cmis:"" will automatically be included in the key name if no colon is present in key name. Example: {name:""test name"", description:""test description""} appianDocument: The Appian document to which the document to copy to the target CMIS system. appianDocumentVersion: The version number of the Appian document to copy to the target CMIS system. If no value is provided for this parameter, the current version of the document will be copied. appianDocumentAllowExpired: Determines if expired Appian documents can be copied. Default: true. "
a!cmiCopyDocumentToAppian(),"a!cmiCopyDocumentToAppian(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, objectId, appianDocument)",scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. objectId: The object id of the CMIS document that will be copied to Appian. appianDocument: The Appian document to which the document from the CMIS system will be copied as a new version. 
a!cmiCopyDocumentToAppianFolder(),"a!cmiCopyDocumentToAppianFolder(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, objectId, appianFolder)",scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. objectId: The object id of the CMIS document that will be copied to Appian. appianFolder: The Appian folder to which the document from the CMIS system will be copied. 
a!cmiCreateFolder(),"a!cmiCreateFolder(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, parentId, properties)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. parentId: The object id of the CMIS folder which will be the parent of the new folder. Use null for root. properties: The CMIS folder properties, given as a dictionary. The string ""cmis:"" will automatically be included in the key name if no colon is present in key name. Example: {name: ""test name"", description: ""test description""} "
a!cmiDelete(),"a!cmiDelete(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, objectId, allVersions)",scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. objectId: The object id of the CMIS object to delete. allVersions: Determines if all versions of the object should be deleted when applicable. Default: true. 
a!cmiGetFolderChildren(),"a!cmiGetFolderChildren(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, folderId, pagingInfo)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. folderId: The object id of the CMIS folder. pagingInfo: The start index and batch size of the list of objects to retrieve, created with a!pagingInfo(). Unlike most indexes in Appian, the start index is 0-based instead of 1-based to match the indexing scheme used by CMIS. The sort values in the paging info are ignored. "
a!cmiGetObjectIdByPath(),"a!cmiGetObjectIdByPath(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, path)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. path: The CMIS path of the object. The meaning of the path is defined by the CMIS server. For example, /folder1/folder2/mydocument3. "
a!cmiGetProperties(),"a!cmiGetProperties(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId, objectId)",scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. objectId: The object id of the CMIS object whose properties will be retrieved. 
a!cmiGetRepoInfo(),"a!cmiGetRepoInfo(scsExternalSystemKey, usePerUserCredentials, atomPubUrl, repositoryId)",scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. atomPubUrl: The Atom Pub URL of the CMIS target system. repositoryId: The repository id on the CMIS target system. 
a!httpAuthenticationBasic(),"a!httpAuthenticationBasic(username, password, preemptive)","username: The username to use during the authentication. Created with a!scsField(). password: The password to use during the authentication. Created with a!scsField(). preemptive: Determines whether or not authentication credentials are sent only after a 401 Not Authorized response or, when true, before the system has challenged. Default: false. "
a!httpFormPart(),"a!httpFormPart(name, contentType, value)","name: The form part name. contentType: The form part content type. This can be set to “auto-detect” to automatically detect the content type of a document value. value: The form part value. If the value is a document, it can be streamed by setting the contentType to “auto-detect”. "
a!httpHeader(),"a!httpHeader(name, value)",name: The header name. value: The header value. Either Text or a!scsField(). 
a!httpQueryParameter(),"a!httpQueryParameter(name, value)",name: The header name. value: The header value. Either Text or a!scsField(). 
a!scsField(),"a!scsField(externalSystemKey, fieldKey, usePerUser)","externalSystemKey: The key of the corresponding external system in the Third Party Credentials admin console page. fieldKey: The key for the field which stores the requested data. usePerUser: If true, the current user's credentials for the third party system will be used. If false, the system-wide credentials for the third party system will be used. Default: false. "
a!verifyRecaptcha(),"a!verifyRecaptcha(onSuccess, onError)",onSuccess: A list of saves to execute after reCAPTCHA executes successfully. Use fv!score to access the score returned by reCAPTCHA. Define conditional logic to protect your page based on whether the interaction is likely a bot or a human. A score of 1.0 is very likely a human while a score of 0.0 is very likely a bot. onError: A list of saves to execute after reCAPTCHA does not execute successfully. Use fv!error to access the returned error. 
a!sapBapiParameters(),"a!sapBapiParameters(scsExternalSystemKey, usePerUserCredentials, hostname, clientNumber, systemNumber, connectionProperties, bapi)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". clientNumber: The SAP client. For example, ""500"". systemNumber: The SAP system number. For example, ""10"". connectionProperties: The connection properties to use when creating the connection to the SAP instance, given as a dictionary. The dictionary fields are the camel-cased names of the properties with '.'s removed, and the values are the properties values to use. bapi: The name of the SAP BAPI for which the parameters will be listed. "
a!sapInvoke(),"a!sapInvoke(scsExternalSystemKey, usePerUserCredentials, hostname, clientNumber, systemNumber, connectionProperties, bapi, importParameters, tableParameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". clientNumber: The SAP client. For example, ""500"". systemNumber: The SAP system number. For example, ""10"". connectionProperties: The connection properties to use when creating the connection to the SAP instance, given as a dictionary. The dictionary fields are the camel-cased names of the properties with '.'s removed, and the values are the properties values to use. bapi: The name of the SAP BAPI to invoke. importParameters: The import parameters to send to the BAPI function, given as a dictionary. The dictionary fields are the import parameter names, and the values are the parameter values to send. tableParameters: The table parameters to send to the BAPI function, given as a dictionary. The dictionary values can also be given as dictionaries, allowing for the requisite table structure to be defined. "
a!sblCreate(),"a!sblCreate(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, parameters, fieldValues)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". parameters: The record to create, given as a dictionary with the field structure of the Siebel Business Component and Business Object to create. fieldValues: The field values of the new record to create, given as a dictionary with the field names based on the fields of the Business Object and values set to the desired new field values. "
a!sblDelete(),"a!sblDelete(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, parameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". parameters: The record to delete, given as a dictionary with the field structure of the Siebel Business Component and Business Object to delete. "
a!sblInvoke(),"a!sblInvoke(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, businessService, method, parameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". businessService: The name of the Siebel Business Service on which to invoke the method. method: The name of the method to invoke. parameters: The input parameters for the method, given as a dictionary where the parameter names are the dictionary field names and the parameter values are give as the dictionary field values. "
a!sblInvokeWriter(),"a!sblInvokeWriter(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, businessService, method, parameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". businessService: The name of the Siebel Business Service on which to invoke the method. method: The name of the method to invoke. parameters: The input parameters for the method, given as a dictionary where the parameter names are the dictionary field names and the parameter values are give as the dictionary field values. "
a!sblQuery(),"a!sblQuery(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, sort, parameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". sort: The sort order to apply to the query, given as a dictionary with field names based on the fields of the Business Object and values of ""ASCENDING"" or ""DESCENDING"". parameters: The records to query, given as a dictionary with the field structure of the Siebel Business Component and Business Object. "
a!sblUpdateFieldValue(),"a!sblUpdateFieldValue(scsExternalSystemKey, usePerUserCredentials, hostname, port, enterpriseApp, appManager, language, fieldValues, parameters)","scsExternalSystemKey: The key from the Third Party Credentials admin console page that corresponds to the set of credentials that should be used to authenticate. usePerUserCredentials: If true the credentials set in the Third-Party Credentials settings page by the current user running the expression will be used. If false the site-wide credential values will be used. hostname: The application server host of the SAP server (ASHOST). The value can be an IP address, a fully-qualified domain name, or SAP's router string format. For example, ""/H/sap_router/W/password/H/app_host/S/service_port"". port: The port the Siebel server is listening on. For example, 2321. enterpriseApp: The enterprise application of the target system. For example, ""SBA_82"". appManager: The active application manager of the target system. For example, ""SSEObjMgr_enu"". language: The target system language. For example, ""enu"". fieldValues: The field values of the new record to update, given as a dictionary with the field names based on the fields of the Business Object and values set to the desired new field values. parameters: The record on which the values will be set, given as a dictionary with the field structure of the Siebel Business Component and Business Object to create. The dictionary should contain an Id field with the value of identifier of the record to update. "
a!wsConfig(),"a!wsConfig(wsdlUrl, service, port, operation, wsdlCredentials, endpointcredentials, extensions)","wsdlUrl: The url of the WSDL for the web service. service: The service to invoke. The value that should be passed here is found in the WSDL for the web service as the value of the name attribute of the <wsdl:service> element. The name must be prefixed with the target namespace of the WSDL, and that namespace must be surrounded by braces. For example, if the target namespace of the wsdl is ""http://example.org"" and the name attribute of the <wsdl:service> element is ""ExampleService,"" the value for this parameter would be {http://example.org}ExampleService. port: The port within the given service to invoke. The value that should be passed here is found in the WSDL as the value of the name attribute of the <wsdl:port> element within the selected <wsdl:service> element. For example, if the port name is ""ExampleSoap,"" the value for this parameter would be ExampleSoap. operation: The operation on the web service to invoke. The value that should be passed here is found in the WSDL as the value of the name attribute of the <wsdl:operation> element within the <wsdl:binding> element that corresponds to the selected <wsdl:port> element. The name must be prefixed with the target namespace of the WSDL, and that namespace must be surrounded by braces. For example, if the target namespace of the wsdl is ""http://example.org"" and the name attribute of the <wsdl:operation> element is ""echoHello,"" the value for this parameter would be {http://example.org}echoHello. wsdlCredentials: If the WSDL requires authentication credentials in order to access it, they must be provided as this parameter. Use the a!wsHttpCredentials system function to construct the value. endpointcredentials: If the web service endpoint requires authentication credentials in order to invoke the web service, they must be provided as this parameter. Use the a!wsHttpCredentials system function to construct the value. extensions: Additional configurations are provided in the extensions parameter. If the web service requires that certain HTTP Headers should be passed, an array of WsHttpHeaderField constructed using a!wsHttpHeaderField can be passed. If the web service requires that WS-Security UsernameToken be used, a single WsUsernameToken or WsUsernameTokenScs can be passed. "
a!wsHttpCredentials(),"a!wsHttpCredentials(username, password, domain)","username: The username used to authenticate. password: The password used to authenticate. domain: If the authentication scheme requires a domain, it is passed as this parameter. "
a!wsHttpHeaderField(),"a!wsHttpHeaderField(name, name)",name: The name of the header to add. name: The value of the header. 
a!wsUsernameToken(),"a!wsUsernameToken(username, password)",username: The username used to authenticate. password: The password used to authenticate. 
a!wsUsernameTokenScs(),"a!wsUsernameTokenScs(systemKey, usePerUser)","systemKey: The key of the corresponding external system in the secure credentials store. Credentials associated with this external system will be retrieved. usePerUser: If true, the current user's credentials for the external system will be used. If false, the system-wide credentials for the external system will be used. "
displayvalue(),"displayvalue(value, inArray, replacement, default)",value: The value to search for in the array. Will cast to the type of inArray. inArray: The array to be searched. replacement: The array of replacement values. default: The default value to be returned if the search value is not found. 
externalize(),externalize(value),value: Value to externalize. 
internalize(),"internalize(externalizedText, default)",externalizedText: Externalized representation of a value. default: Value to return if the text cannot be internalized or an error occurs. 
toboolean(),toboolean(value),value: Value to convert. 
tocommunity(),tocommunity(value),value: Value to convert. 
todate(),todate(value),value: Value to convert. 
todatetime(),todatetime(value),value: Value to convert. 
todecimal(),todecimal(value),value: Value to convert. 
todocument(),todocument(value),value: Value to convert. 
toemailaddress(),toemailaddress(value),value: Value to convert. 
toemailrecipient(),toemailrecipient(value),value: Value to convert. 
tofolder(),tofolder(value),value: Value to convert. 
tointeger(),tointeger(value),value: Value to convert. 
tointervalds(),tointervalds(value),value: Value to convert. 
toknowledgecenter(),toknowledgecenter(value),value: Value to convert. 
tostring(),tostring(value),value: Value to convert. 
totime(),totime(value),value: Value to convert. 
touniformstring(),touniformstring(value),value: Value to convert. 
a!customFieldConcat(),a!customFieldConcat(value),"value: An array of 2 to 10 values to concatenate. Values can be any combination of record fields, related record fields, custom field functions, or literal values of type Text, Number (Integer), User, or Group. "
a!customFieldCondition(),"a!customFieldCondition(field, operator, value)","field: The record field, related record field, or custom field function to be compared in the condition. Use the recordType! domain to reference a record field or related record field. For example, recordType!Case.fields.caseName. operator: The operator used to compare the field and value parameters. Valid values: ""="", ""<>"", "">"", "">="", ""<"", ""<="", ""between"", ""in"", ""not in"", ""is null"", ""not null"", ""starts with"", ""not starts with"", ""ends with"", ""not ends with"", ""includes"", ""not includes"". value: The value to compare to the given field using the given operator. This value must be a literal. "
a!customFieldMatch(),"a!customFieldMatch(value, equals, whenTrue, then, default)","value: The value to match. This value can be a record field, related record field, or custom field function. This value can be accessed in other parameters using the function variable fv!value. This parameter is required. equals: This value is considered a match if it equals the value parameter. This parameter is best to use when evaluating literal values (for example, 1 or ""Red""). Text values are case sensitive, so the casing must match that of the value parameter. whenTrue: The expression considered a match if it evaluates to true. Use a!customFieldCondition(), a!customFieldLogicalExpression(), or both to define your conditional logic. Alternatively, you can provide any custom field function or record field that returns a boolean. then: A record field, related record field, custom field function, or literal value to return when the equals or whenTrue parameter matches the value parameter. If you use multiple condition pairs, only the first match will be returned. All then parameters must be the same data type or compatible data types. Compatible data types include Number (Integer)/Number (Decimal) and Date/Date and Time. default: A record field, related record field, custom field function, or literal value to return if there are no equals or whenTrue parameters that match the value parameter. This parameter is required. "
a!customFieldDateDiff(),"a!customFieldDateDiff(startDate, endDate, interval)","startDate: The record field or expression that evaluates to a Date or Date and Time value to use in the date subtraction. endDate: The record field or expression that evaluates to a Date or Date and Time value to use in the date subtraction. interval: Determines whether the difference is calculated in days, hours, minutes, or seconds. Valid values are ""DAY"" (default), ""HOUR"", ""MINUTE"", ""SECOND"". "
a!customFieldDefaultValue(),"a!customFieldDefaultValue(value, default)","value: The record field or related record field to return if not null or empty. default: The record field, related record field, or literal value to return if not null or empty. This function accepts multiple default parameters, and each parameter will be evaluated in order until the first non-null and non-empty default is returned. "
a!customFieldDivide(),"a!customFieldDivide(numerator, denominator)","numerator: The record field, related record field, or literal value to divide. denominator: The record field, related record field, or literal value by which the numerator is divided. "
a!customFieldLogicalExpression(),"a!customFieldLogicalExpression(operator, conditions)","operator: Determines how a set of conditions are evaluated. Valid values: ""AND"" and ""OR"". conditions: A list of a!customFieldLogicalExpression(), a!customFieldCondition(), or both. Alternatively, you can provide any custom field function or record field that returns a boolean. You can reference record fields or related record fields using the recordType! domain. You can also use fv!value to access the value parameter from a!customFieldMatch(). "
a!customFieldMatch(),"a!customFieldMatch(value, equals, whenTrue, then, default)","value: The value to match. This value can be a record field, related record field, or custom field function. This value can be accessed in other parameters using the function variable fv!value. This parameter is required. equals: This value is considered a match if it equals the value parameter. This parameter is best to use when evaluating literal values (for example, 1 or ""Red""). Text values are case sensitive, so the casing must match that of the value parameter. whenTrue: The expression considered a match if it evaluates to true. Use a!customFieldCondition(), a!customFieldLogicalExpression(), or both to define your conditional logic. Alternatively, you can provide any custom field function or record field that returns a boolean. then: A record field, related record field, custom field function, or literal value to return when the equals or whenTrue parameter matches the value parameter. If you use multiple condition pairs, only the first match will be returned. All then parameters must be the same data type or compatible data types. Compatible data types include Number (Integer)/Number (Decimal) and Date/Date and Time. default: A record field, related record field, custom field function, or literal value to return if there are no equals or whenTrue parameters that match the value parameter. This parameter is required. "
a!customFieldMatch(),"a!customFieldMatch(value, equals, whenTrue, then, default)","value: The value to match. This value can be a record field, related record field, or custom field function. This value can be accessed in other parameters using the function variable fv!value. This parameter is required. equals: This value is considered a match if it equals the value parameter. This parameter is best to use when evaluating literal values (for example, 1 or ""Red""). Text values are case sensitive, so the casing must match that of the value parameter. whenTrue: The expression considered a match if it evaluates to true. Use a!customFieldCondition(), a!customFieldLogicalExpression(), or both to define your conditional logic. Alternatively, you can provide any custom field function or record field that returns a boolean. then: A record field, related record field, custom field function, or literal value to return when the equals or whenTrue parameter matches the value parameter. If you use multiple condition pairs, only the first match will be returned. All then parameters must be the same data type or compatible data types. Compatible data types include Number (Integer)/Number (Decimal) and Date/Date and Time. default: A record field, related record field, custom field function, or literal value to return if there are no equals or whenTrue parameters that match the value parameter. This parameter is required. "
a!customFieldMultiply(),a!customFieldMultiply(value),"value: An array containing any combination of record fields, related record fields, or literal values to be multiplied. You must have at least two values in the array. "
a!customFieldSubtract(),"a!customFieldSubtract(value1, value2)","value1: The record field, related record field, or literal value from which value2 is subtracted. Valid data types include Number (Integer) or Number (Decimal). value2: The record field, related record field, or literal value to subtract. Valid data types include Number (Integer) or Number (Decimal). "
a!customFieldSum(),a!customFieldSum(value),"value: An array containing any combination of record fields, related record fields, or literal values to be summed. You must have at least two values in the array. "
a!addDateTime(),"a!addDateTime(startDateTime, years, months, days, hours, minutes, seconds, useProcessCalendar, processCalendarName)","startDateTime: The starting Date and Time value. Use the datetime() function to convert a given date and time into a serial number that holds the Date and Time data type. This parameter is required. years: The number of years to add to the start value. months: The number of months to add to the start value. days: The number of days to add to the start value. hours: The number of hours to add to the start value. minutes: The number of minutes to add to the start value. seconds: The number of seconds to add to the start value. useProcessCalendar: Determines if a process calendar is used to calculate the result. The returned value will fall within the work time defined in the calendar. Default is false. processCalendarName: The name of the process calendar to use. If useProcessCalendar is true and this parameter is not specified, the default process calendar is used. This parameter is case-sensitive. "
calisworkday(),"calisworkday(datetime, calendar_name)","datetime: The Date and Time to test. calendar_name: This optional parameter accepts the name of a system calendar; otherwise, the default calendar is used. "
calisworktime(),"calisworktime(datetime, calendar_name)","datetime: The Date and Time to test. calendar_name: This optional parameter accepts the name of a system calendar; otherwise, the default calendar is used. "
calworkdays(),"calworkdays(start_datetime, end_datetime, calendar_name)","start_datetime: The starting Date and Time. end_datetime: The ending Date and Time. calendar_name: This optional parameter accepts the name of a system calendar; otherwise, the default calendar is used. "
calworkhours(),"calworkhours(start_datetime, end_datetime, calendar_name)","start_datetime: The starting Date and Time. end_datetime: The ending Date and Time. calendar_name: This optional parameter accepts the name of a system calendar; otherwise, the default calendar is used. "
date(),"date(year, month, day)",year: The year of the date you would like to convert into a serial number. month: It month of the date in number format without leading zeros for a month with one digit. day: The day component of the date. 
datetime(),"datetime(year, month, day, hour, minute, second)","year: The year of the you would like to convert into a serial number. month: Only numbers are accepted, not month names. Do not include leading zeroes for a month with one digit. day: The day of the Date and Time. hour: The hour of the Date and Time. minute: The minute of the Date and Time. second: The seconds of the Date and Time. "
datevalue(),datevalue(value),value: Value to convert. 
day(),day(date),date: The date from which the day of the month will be extracted. 
dayofyear(),dayofyear(date),date: The date or datetime timestamp from which the day number will be extracted. 
days360(),"days360(start_date, end_date, method)","start_date: The starting date. end_date: The ending date. method: 1 for European, 0 for US/NASD. "
daysinmonth(),"daysinmonth(month, year)",month: The month number. year: The year number. 
edate(),"edate(starting_date, months)","starting_date: The starting date. months: The number of months to offset, where negative is before starting_date and positive is after starting_date. "
eomonth(),"eomonth(starting_date, months)","starting_date: The starting date. months: The number of months to offset, where negative is before starting_date and positive is after starting_date. "
gmt(),"gmt(datetime, timezone)",datetime: The base Date and Time to be modified. timezone: The time zone offset to subtract from the datetime parameter. 
hour(),hour(time),time: A time or date & time value from which the hour is extracted. 
intervalds(),"intervalds(hour, minute, second)",hour: The number of hours in the time duration. minute: The number of minutes in the time duration. second: The number of seconds in the time duration. 
isleapyear(),isleapyear(year),year: The year to test whether or not it qualifies as a leap year. 
lastndays(),"lastndays(date, n)",date: The base date. n: The number of days to test. 
local(),"local(datetime, timezone)",datetime: The base Date and Time to be modified. timezone: The time zone offset to add to the datetime parameter. 
milli(),milli(time),time: Time or Datetime timestamp from which to extract the milliseconds. 
minute(),"minute(time, minute)",time: The time from which the minute is extracted. minute:  
month(),month(date),date: The date from which the month is extracted. 
networkdays(),"networkdays(starting_date, ending_date, holidays)",starting_date: The starting date. ending_date: The ending date. holidays: A list of holidays not counted as workdays. 
now()(),now()(),
second(),second(time),time: The time from which the seconds are extracted. 
a!subtractDateTime(),"a!subtractDateTime(startDateTime, years, months, days, hours, minutes, seconds, useProcessCalendar, processCalendarName)","startDateTime: The starting Date and Time value. Use the datetime() function to convert a given date and time into a serial number that holds the Date and Time data type. This parameter is required. years: The number of years to subtract from the start value. months: The number of months to subtract from the start value. days: The number of days to subtract from the start value. hours: The number of hours to subtract from the start value. minutes: The number of minutes to subtract from the start value. seconds: The number of seconds to subtract from the start value. useProcessCalendar: Determines if a process calendar is used to calculate the result. The returned value will fall within the work time defined in the calendar. Default is false. processCalendarName: The name of the process calendar to use. If useProcessCalendar is true and this parameter is not specified, the default process calendar is used. This parameter is case-sensitive. "
time(),"time(hour, minute, second, millisecond)",hour: The number of hours to add to the total. minute: The number of minutes to add to the total. second: The number of seconds to add to the total. millisecond: The number of milliseconds to add to the total. 
timevalue(),timevalue(time_text),time_text: The time of day to be converted into an interval. 
timezone()(),timezone()(),
timezoneid()(),timezoneid()(),
today()(),today()(),
weekday(),"weekday(date, return_type)","date: The date that the day of the week will be calculated from return_type: Controls how the days of the week are numbered with 1 correlating 1-7 with Sunday-Saturday, 2 correlating 1-7 with Monday-Sunday, and 3 correlating 0-6 with Monday-Sunday. "
weeknum(),"weeknum(date, methodology)",date: The date for which the week number will be determined. methodology: Controls what day is the first of the week with 1 correlating with the week beginning on Sunday and 2 correlating with the week beginning on Monday. The default value of methodology is 1. 
workday(),"workday(starting_date, days, holidays)",starting_date: The starting date. days: The number of days to advance into the future (positive numbers) or days to retreat into the past (negative numbers). holidays: A list of holidays not counted as workdays. 
year(),year(date),date: The date from which the year is extracted. 
yearfrac(),"yearfrac(start_date, end_date, method)","start_date: The starting date. end_date: The endng date. method: The methodology, where 0 or omitted is US(NASD) 30/360, 1 is Actual/Actual, 2 is Actual/360, 3 is Actual/365, 4 is European 30/360. "
a!docExtractionResult(),"a!docExtractionResult(docExtractionId, typeNumber, confidenceThreshold, isStructuredDoc)","docExtractionId: ID of the doc extraction run. In order to retrieve the results, a run must first be started by the Start Doc Extraction smart service and a!docExtractionStatus() function should return COMPLETE. typeNumber: The type to which the values should be populated on output. This may be retrieved by using typeof(), where x is a value of the intended type, or reference a type with 'type!{namespace}type-name' (within single quotes). confidenceThreshold: Optional input. Only results that meet or exceed this value will be automatically populated into the provided type. Default confidence is 0. Valid values are between 0 (everything included) and 100 (only results with 100 confidence are included). Confidence is the analysis model's interpretation of how good it thinks the prediction is. The best use case for confidence is a rough first-order filter for ""good"" or ""bad"" predictions before further processing. isStructuredDoc: Set this value to true when fields to be extracted are in the same location for all documents of the specified Data Type Number. When you pass in structured documents and perform reconciliation, Appian Document Extraction learns to recognize this information based on its position, improving results for future extractions. Default: false. "
a!docExtractionStatus(),a!docExtractionStatus(docExtractionId),"docExtractionId: ID of the doc extraction run. In order to check the status, a run must first be started by the Start Doc Extraction smart service. "
a!localVariables(),"a!localVariables(localVar1, localVarN, expression)","localVar1:  localVarN: Any additional local variables, as needed. expression: The expression to evaluate using the local variables values. "
a!refreshVariable(),"a!refreshVariable(value, refreshAlways, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange, refreshAfter)","value: The value of the local variable when it is created and what the variable is set to each time it is refreshed in an interface. refreshAlways: When true, the value of this local variable will be refreshed after each user interaction and each interval refresh. Because the variable is continually refreshed, you cannot update its value by saving into it. Default is false. refreshInterval: How often the variable value gets refreshed in minutes. When null, the variable will not be refreshed on an interval. Because the variable is periodically refreshed, you cannot update its value by saving into it. Valid values include 0.5, 1, 2, 3, 4, 5, 10, 30, 60. refreshOnReferencedVarChange: When true, the value of this local variable will be refreshed each time the value of any variable it references within the value parameter is updated. To refresh the local variable when another variable that is not used within value changes, use refreshOnVarChange. Default is true. refreshOnVarChange: Refreshes the value of the local variable each time any of these specific variables change. This allows you to refresh the value when a variable that is not referenced within the value parameter is updated. refreshAfter: Refreshes the value of the local variable after a record action, such as a related action or a record list action configured within a record type, completes from a dialog window within the Record Action Component. Instead of requiring the entire page to reload, this parameter allows you to refresh a local variable value on an interface after a record action completes. Valid values include RECORD_ACTION. "
bind(),"bind(get, set)",get: A rule or function that returns any type. The rule or function given as the get parameter will not be evaluated until the bound variable is referenced in the expression. set: A rule or function that returns a writer. The writer will execute when the bound variable is written to in a saveInto in an interface. 
load(),"load(localVar1, localVarN, expression)","localVar1: The local variable to use when evaluating the given expression and defined using load(local!a,..., expression) or load(local!a:10, ..., expression). localVarN: Any additional local variables, as needed. expression: The expression to evaluate using the local variables' values. "
a!save(),"a!save(target, value)","target: A local variable, rule input, process variable, or node input in which to save the value. Local variables that refresh on an interval using ""refreshInterval"" or on every evaluation, either because they are using ""refreshAlways"" or because they are defined in the with() function, cannot be used as save targets. value: The value to save. The component's updated value can be accessed using the special variable save!value. "
with(),"with(localVar1, localVarN, expression)","localVar1: The local variable to use when evaluating the given expression and defined using with(local!a,..., expression) or with(local!a:10, ..., expression). localVarN: Any additional local variables, as needed. expression: The expression to evaluate using the local variables' values. "
a!defaultValue(),"a!defaultValue(value, default)",value: Value to be returned if not null or empty. default: Default value to return when value is null or empty. 
a!keys(),a!keys(value),"value: The map, dictionary, CDT, or record whose keys should be returned. "
a!listType(),a!listType(typeNumber),"typeNumber: The type for whose corresponding list type should be returned. This may be retrieved by using typeof(x), where x is a value of the intended type, referencing a type with 'type!{namespace}type-name' (within single quotes), or for records, using the record type reference (e.g. recordType!Customer). "
cast(),"cast(typeNumber, value)","typeNumber: The type to which the value should be cast. This may be retrieved by using typeof(x), where x is a value of the intended type, or referencing a type with 'type!{namespace}type-name' (within single quotes). value: The value that should be cast to type typeNumber. "
error(),error(message),message: The text of the error message. 
infinity()(),infinity()(),
isinfinite(),isinfinite(number),number: Number to test against infinity. 
isnegativeinfinity(),isnegativeinfinity(number),number: Number to test against negative infinity. 
isnull(),isnull(value),value: Value to check for null. 
ispositiveinfinity(),ispositiveinfinity(number),number: Number to test against positive infinity. 
nan()(),nan()(),
null(),null(value),"value: The value to be inquired for type. For example, typename(runtimetypeof(topeople(123))) might return ""Group"". "
runtimetypeof(),runtimetypeof(value),"value: The value to be inquired for type. For example, typename(runtimetypeof(topeople(123))) might return ""Group"". "
typename(),typename(typeNumber),"typeNumber: The type number to be inquired for its name. This may be retrieved by using typeof(x), where x is a value of the intended type, or referencing a type with 'type!{namespace}type-name' (within single quotes). "
typeof(),typeof(value),"value: The value to be inquired for type. For example, typename(typeof(123)) might return ""Integer (Number)"". "
and(),and(value),value: A value or array of values that must be true for the function to return true. 
choose(),"choose(key, choice1, choiceN)","key: The one-based index that selects which choice argument to evaluate and return. choice1: The first of n possible expressions, where n must be >= 1. Only the selected value is evaluated. choiceN: An unlimited number of expressions. "
false(),false(returns),returns: Returns the boolean value false. 
if(),"if(condition, valueIfTrue, valueIfFalse)",condition: A test that determines whether valueIfTrue or valueIfFalse will be returned. valueIfTrue: The value to be returned if condition returns true. valueIfFalse: The value to be returned if condition returns false. 
a!match(),a!match(valueequalsthenwhenTruethendefault),:  :  :  :  :  
not(),not(value),value: A Boolean or array of Booleans to be toggled. 
or(),or(value),value: A value or array of values that must be false for the function return false. 
true(),true(returns),returns: Returns the boolean value true. 
a!forEach(),"a!forEach(items, expression)",items: An array or DataSubset containing the items to iterate over. expression: An expression that will be evaluated for each item. See Usage considerations for more information. 
all(),"all(predicate, list, context)",predicate: Expression that returns a Boolean (true or false). list: List of elements that the predicate iterates through. context: Variable number of parameters passed directly into each predicate evaluation. 
any(),"any(predicate, list, context)",predicate: Expression that returns a Boolean (true or false). list: List of elements that the predicate iterates through. context: Variable number of parameters passed directly into each predicate evaluation. 
apply(),"apply(function, list, context)",function: Rule or expression function. list: List of elements that function iterates through. context: Variable number of parameters passed directly into each function evaluation. 
filter(),"filter(predicate, list, context)",predicate: Expression that returns a Boolean (true or false). list: List of elements that the predicate iterates through. context: Variable number of parameters passed directly into each predicate evaluation. 
merge(),merge(list),list: Variable number of lists to merge into one list. 
none(),"none(predicate, list, context)",predicate: Expression that returns a Boolean (true or false). list: List of elements that the predicate iterates through. context: Variable number of parameters passed directly into each predicate evaluation. 
reduce(),"reduce(function, initial, list, context)",function: Rule or expression function. initial: The accumulator's initial value. list: Array of elements that the function iterates through. context: Variable number of parameters passed directly into each function evaluation. 
reject(),"reject(predicate, list, context)",predicate: Expression that returns a Boolean (true or false). list: List of elements that the predicate iterates through. context: Variable number of parameters passed directly into each function evaluation. 
abs(),abs(number),"number: A number or array of numbers, the absolute value(s) of which will be returned. "
ceiling(),"ceiling(number, significance)","number: A number, the ceiling of which will be returned. significance: The number will be rounded to the lowest multiple of the significance that is greater than the number. "
combin(),"combin(n, m)",n: The number of elements that can be chosen from. m: The number of elements that will be chosen from the pool of n elements. 
e()(),e()(),
enumerate(),enumerate(n),n: The number of days to test. 
exp(),exp(power),power: The power to raise e to. 
floor(),"floor(number, significance)","number: A number, the floor of which will be returned. significance: The number will be rounded to the highest multiple of the significance that is less than the number. "
int(),int(number),number: The number that will be rounded. 
ln(),ln(number),number: The number in which the natural logarithm will be returned. 
log(),"log(number, base)","number: A number, the logarithm of which will be returned. base: The base to use in the logarithm calculation. 10 and e are common values for the base. "
mod(),"mod(dividend, divisor)",dividend: The number that will serve as the dividend in the modulus calculation. divisor: The number that will serve as the divisor or base in the modulus calculation. 
mround(),"mround(number, multiple)",number: The number that will be rounded. multiple: The multiple to which you want to round the number. 
multinomial(),multinomial(integer),integer: A number or set of numbers that will be factored into the multinomial. 
odd(),odd(number),number: The number that will be rounded. 
pi()(),pi()(),
power(),"power(base, exponent)",base: The base for exponentiation. exponent: The power that the base will be raised to. 
product(),product(factor),factor: A number or set of numbers that will be factored into the final product. 
quotient(),"quotient(numerator, denominator)","numerator: The numerator of the quotient, or the number that is divided. denominator: The denominator of the quotient, or the number to divide by. "
rand(),rand(count),count: The number of random numbers to be returned. 
round(),"round(number, num_digits)",number: The number that will be rounded. num_digits: Determines the digit or place to which the number will be rounded to the nearest 10^(-num_digits). 2 is default. 
rounddown(),"rounddown(number, num_digits)",number: The number to be rounded. num_digits: Determines the digit or place to which the number will be rounded down to the nearest 10^(-num_digits). 2 is default. 
roundup(),"roundup(number, num_digits)",number: The number to be rounded. num_digits: Determines the digit or place to which the number will be rounded up to the nearest 10^(-num_digits). 2 is default. 
sign(),sign(number),number: The number that will be divided by its absolute value. 
sqrt(),sqrt(number),"number: A number or array of numbers, the square root(s) of which will be returned. "
sqrtpi(),sqrtpi(number),number: The number that will be multiplied by pi and have its square root taken. 
sumsq(),sumsq(number),number: A number or array of numbers that will be squared before being added into the final sum. 
trunc(),"trunc(value, numberOfDecimals)",value: A decimal number. numberOfDecimals: The number of places after the decimal point to which the number should be truncated. 
a!doesGroupExist(),a!doesGroupExist(groupId),groupId: The ID of the group to be checked. 
a!groupMembers(),"a!groupMembers(group, direct, memberType, pagingInfo)","group: The group whose members are to be retrieved. direct: If set to true, returns only the direct members of the group. Default is false. memberType: Determines the member types that are retrieved. Valid values: ""ALL"" (default), ""GROUP"", ""USER"". pagingInfo: The paging and sorting configurations to apply when retrieving group members. The minimum batchSize is 0 and the maximum is 10,000. If none is provided, a default batchSize of 100 will be used. "
a!groupsByName(),a!groupsByName(groupName),groupName: The case-insensitive name of the group to retrieve. 
a!groupsByType(),"a!groupsByType(groupType, pagingInfo)","groupType: The group type of the groups to be retrieved. pagingInfo: The paging and sorting configurations to apply when retrieving the groups. The minimum batchSize is 0 and the maximum is 10,000. If none is provided, a default batchSize of 1,000 will be used. "
a!groupsForUser(),"a!groupsForUser(username, isGroupAdministrator, groupTypes)","username: The user whose group membership information should be retrieved. isGroupAdministrator: Determines whether to return groups where the user is an administrator, rather than a member. When set to true, returns the groups where the user has Administrator permissions. When set to false, returns the groups where the user is a member. Default: false. groupTypes: Limits the returned groups to those of the specified type(s). If this property specifies multiple groups types, the function returns groups that match any of the specified group types. "
a!isUserMemberOfGroup(),"a!isUserMemberOfGroup(username, groups, matchAllGroups)","username: The username of the user for whom you wish to check for group membership. groups: One or more groups to check for membership. matchAllGroups: Determines whether to match any or all of the provided groups. When set to true, the function will check that the user is a member of ALL of the groups. Default: false "
getdistinctusers(),getdistinctusers(peopleArray),peopleArray: The groups or users and groups that you want to convert to the User data type. 
getgroupattribute(),"getgroupattribute(group, attribute)",group: The group for which the value of the attribute is to be retrieved. attribute: The name of the desired attribute. 
group(),"group(groupId, property)",groupId: The Id of the group to be retrieved. property: Information to retrieve for this group. 
isusermemberofgroup_21r2(),"isusermemberofgroup_21r2(username, groupId)",username: The username to check for group membership. groupId: The Id of the group. 
isusernametaken(),isusernametaken(username),username: The username to check against the current list of active and deactivated users. 
loggedInUser()(),loggedInUser()(),
supervisor(),supervisor(userinfo),"userinfo: The user info of the user, which can be either the username or the user itself. "
togroup(),togroup(value),value: Value to convert. 
topeople(),topeople(value),value: Value to convert. 
touser(),touser(value),value: Value to convert. 
user(),"user(username, property)",username: The username or user object of the user whose information should be retrieved. property: The information to retrieve for this user. See Usage considerations. 
a!aggregationFields(),"a!aggregationFields(groupings, measures)",groupings: Fields to group by using a list of a!grouping(). measures: Calculations to perform using a list of a!measure(). 
a!isNativeMobile()(),a!isNativeMobile()(),
a!isPageWidth(),a!isPageWidth(pageWidths),"pageWidths: Valid values: ""PHONE"", ""TABLET_PORTRAIT"", ""TABLET_LANDSCAPE"", ""DESKTOP_NARROW"", ""DESKTOP"", ""DESKTOP_WIDE"". "
a!urlForTask(),"a!urlForTask(taskIds, returnTaskPathOnly)","taskIds: Task IDs of process tasks to generate links. returnTaskPathOnly: If true, only the last path segment to the task is included; if false, the full URL of the task is returned. Default: false "
averagetaskcompletiontimeforprocessmodel(),"averagetaskcompletiontimeforprocessmodel(Id, includeSubProcessData)",Id: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the completion time averages. 
averagetasklagtimeforprocessmodel(),"averagetasklagtimeforprocessmodel(Id, includeSubProcessData)",Id: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the completion time averages. 
averagetaskworktimeforprocessmodel(),"averagetaskworktimeforprocessmodel(Id, includeSubProcessData)",Id: The Id number of the process model. includeSubProcessData: This property controls whether data from subprocesses are included in the work time average. 
community(),"community(communityId, property)","communityId: The Id number of the community or community object you need property information from. property: The information you aree asking for, enclosed with quotation marks (""). "
datetext(),"datetext(value, format)",value: The value to convert to a text string. format: The pattern you want to use for the output. 
document(),"document(documentId, property)",documentId: The Id of the document. This parameter accepts document objects as well. Document objects are represented by their Id number internally. property: Information to retrieve for this document. 
folder(),"folder(folderId, property)",folderId: The Id number of the folder or the folder object. property: The information you need to retrieve regarding the document. 
isInDaylightSavingTime(),"isInDaylightSavingTime(date, timezone)",date: The date in which the expression should evaluate. timezone: The string Id of a timezone. 
knowledgecenter(),"knowledgecenter(knowledgeCenterId, property)",knowledgeCenterId: The Id of the knowledge center to be retrieved. This parameter accepts knowledge center objects as well. Knowledge center objects are represented by their Id number internally. property: Information to retrieve for this knowledge center. 
numontimeprocessesforprocessmodel(),"numontimeprocessesforprocessmodel(processModelId, includeSubProcessData)",processModelId: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the count. 
numontimetasksforprocessmodel(),"numontimetasksforprocessmodel(processModelId, includeSubProcessData)",processModelId: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the count. 
numoverdueprocessesforprocessmodel(),"numoverdueprocessesforprocessmodel(processModelId, includeSubProcessData)",processModelId: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the count. 
numoverduetasksforprocessmodel(),"numoverduetasksforprocessmodel(processModelId, includeSubProcessData)",processModelId: The Id number of the process model. includeSubProcessData: Controls whether data from subprocesses are included in the count. 
numprocessesforprocessmodelforstatus(),"numprocessesforprocessmodelforstatus(processModelId, status, includeSubProcessData)",processModelId: The Id number of the process model). status: The status of the processes you want counted. The following status parameters are available: active cancelled completed paused problem (problem processes are paused by exception.) includeSubProcessData: Controls whether data from subprocesses are included in the count. 
numtasksforprocessmodelforstatus(),"numtasksforprocessmodelforstatus(processModelId, status, includeSubProcessData)",processModelId: The Id number of the process model. status: The status of the tasks you want counted. includeSubProcessData: Controls whether data from subprocesses are included in the count. 
offsetFromGMT(),"offsetFromGMT(date, timezone)",date: The date for which the offset should be returned. timezone: The string Id of the timezone for which the offset should be returned. 
property(),"property(bean, nameOfProperty, valueIfMissing)",bean: Bean to retrieve the property from. nameOfProperty: Property to retrieve from the bean. valueIfMissing: Default value to return if the property is not present in the bean. 
repeat(),"repeat(times, input)",times: The number of times to repeat the input. input: The scalar value to repeat. Lists are not allowed. 
todatasubset(),"todatasubset(arrayToPage, pagingConfiguration)",arrayToPage: The array of values to page and sort. pagingConfiguration: The paging and sorting configuration. 
topaginginfo(),"topaginginfo(startIndex, batchSize)",startIndex: The value for the startIndex field. batchSize: The value for the batchSize field. 
torecord(),"torecord(xml, type)",xml: The XML text representing the Value to convert. type: Enter a variable (process variable or activity class) that has the same data type that you want the XML to be converted into. 
toxml(),"toxml(value, format, name, namespace)","value: The value or variable (PV, ACP) to be converted to XML. format: Whether or not to format the result. If true, the resultant XML is formatted with line breaks and indenting, otherwise it uses a compact notation. If not given, the result is unformatted XML. name: The name to use as the root element name in the resultant XML. If not given, the name of the data type of the variable passed as the value parameter is used. namespace: The namespace to use as the default namespace in the resultant XML. If not given, the namespace of the data type of the variable passed as the value parameter is used. "
urlforrecord(),"urlforrecord(recordType, recordIds)",recordType: The record type for the record(s). recordIds: The identifiers of the record(s) to return URLs for. 
urlwithparameters(),"urlwithparameters(parameterNames, parameterValues)",parameterNames: The parameters to append to the URL. parameterValues: The parameter values corresponding to the parameter names to append to the URL. 
userdate(),"userdate(year, month, day)",year: The year of the date you would like to convert into a serial number. month: The number of the month of the date. day: The day of the date. 
userdatetime(),"userdatetime(year, month, day, hour, minute, second)",year: The year of the datetime you would like to convert into a serial number. month: The number of the month of the datetime. day: The day of the datetime. hour: The hour of the datetime. minute: The minute of the datetime. second: The seconds of the datetime. 
userdatevalue(),userdatevalue(date_text),date_text: The date to be converted into a serial number. 
userday(),userday(date),date: The date or datetime from which the day of the month will be extracted. 
userdayofyear(),userdayofyear(date),"date: The date/datetime for which ""dayofyear"" is requested. "
userdaysinmonth(),"userdaysinmonth(month, year)",month: The month for which days are requested. year: The year for which days in month is requested. 
useredate(),"useredate(start_date, months)","start_date: The starting date. months: The number of months to offset, where negative is before starting_date and positive is after start_date. "
usereomonth(),"usereomonth(starting_date, months)","starting_date: The starting date. months: The number of months to offset, where negative is before starting_date and positive is after start_date. "
userisleapyear(),userisleapyear(year),year: The year to test whether or not it qualifies as a leap year. 
userlocale(),userlocale(user),user: The user (or the username of the user) for whom the locale should be returned. 
usermonth(),usermonth(date),date: The date or datetime from which the month is to be extracted. 
usertimezone(),usertimezone(user),user: The user (or the username of the user) for whom the timezone should be returned. 
userweekday(),"userweekday(date, return_type)",date: The date or datetime that the day of the week will be calculated from. return_type: Control for how the days of the week are numbered. 
userweeknum(),"userweeknum(date, methodology)",date: The date or datetime for which the week number is to be determined. methodology: Controls what day the week begins on. 
useryear(),useryear(date),date: The date or datetime from which the year is to be extracted. 
webservicequery(),"webservicequery(config, data)","config: defines the configuration details of the web service to invoke and any authentication configurations that are required by the service. use the a!wsconfig system function to construct the value for this argument. data: A dictionary of input objects that matches the message structure of the web service operation being invoked. The keys of the dictionary must correspond to the parameter names declared for the operation in the WSDL. The value of each key is itself a dictionary, with the keys based on the field names of the complex type defined as the input type in the WSDL. Keys are matched to parameter names case-sensitively. 	If the web service does not require an input, an empty dictionary should be passed, i.e. {}. "
webservicewrite(),"webservicewrite(config, data)","config: Defines the configuration details of the web service to invoke and any authentication configurations that are required by the service. Use the a!wsConfig system function to construct the value for this argument. data: A dictionary of input objects that matches the message structure of the web service operation being invoked. The keys of the dictionary must correspond to the parameter names declared for the operation in the WSDL. The value of each key is itself a dictionary, with the keys based on the field names of the complex type defined as the input type in the WSDL. Keys are matched to parameter names case-sensitively. If the web service does not require an input, an empty dictionary should be passed, i.e. {}. "
xpathdocument(),"xpathdocument(docId, expression, prefix)",docId: The Appian Document Id of the XML file or Content Item (Document). expression: The XPath Expression to evaluate. prefix: Prefix used if the XML document has a default namespace. 
xpathsnippet(),"xpathsnippet(snippet, expression, prefix)",snippet: An XML Snippet or an XML Document URL. expression: The XPath Expression to evaluate. prefix: Prefix used if the XML document has a default namespace. 
contains(),"contains(array, value)",array: Array to check. value: Value to look for. 
difference(),"difference(array1, array2)",array1: Initial array of values. array2: Array of values to remove from array1. 
intersection(),"intersection(array1, array2)",array1: Array to intersect. array2: Array to intersect. 
symmetricdifference(),"symmetricdifference(array1, array2)",array1: Array of values. array2: Array of values. 
union(),"union(array1, array2)",array1: Array to combine. array2: Array to combine. 
avedev(),avedev(number),number: A number or array of numbers to include in the set on which the average deviation will be calculated. 
average(),average(number),number: A number or array of numbers to include in the set that will be averaged. 
count(),count(value),value: An element or set of elements to be counted. 
frequency(),"frequency(data_array, bins_array)",data_array: The set of numbers that will be divided into groups according to bins_array and then counted bins_array: The upper (and inclusive) boundaries of the groups into which the elements from the data array will be dispersed. 
gcd(),gcd(number),number: The list of non-negative numbers. 
geomean(),geomean(number),number: One of the numbers or an array of numbers that will be exponentiated before being multiplied to calculate the geometric mean. 
harmean(),harmean(number),number: Numbers over which to calculate the harmonic mean. 
lcm(),lcm(number),number: The list of non-negative numbers. 
lookup(),"lookup(multipleValues, dataToLookup, valueIfNotPresent)",multipleValues: Values to lookup within. dataToLookup: Value to lookup within multipleValues. valueIfNotPresent: Value to return if dataToLookup is not present. 
max(),max(number),number: A candidate number or an array of candidates for the maximum. 
median(),median(number),number: A number or array of numbers that will be used to calculate the median of the set. 
min(),min(number),number: A candidate number or an array of candidates for the minimum. 
mode(),mode(number),number: A number or array of numbers that will be used to calculate the mode of the set. 
rank(),"rank(number, array, order)",number: The number to be ranked array: An array of numbers containing the number to be ranked order: Use 0 to rank the array elements from high to low and 1 to rank the array in ascending order. 
stdev(),stdev(number),number: A member or array of members of the set from which the standard deviation will be calculated. 
stdevp(),stdevp(number),number: A member or array of members of the set from which the standard deviation will be calculated. 
var(),var(number),number: A member or array of members of the set from which the variance will be calculated. 
varp(),varp(number),number: A member or array of members of the set from which the variance will be calculated. 
a!applyComponents(),"a!applyComponents(function, array, arrayVariable)",function: Rule or expression function. array: Array of elements that the function iterates through. arrayVariable: Optional variable for preserving component or rule data. 
a!dataSubset(),"a!dataSubset(startIndex, batchSize, sort, totalCount, data, identifiers)","startIndex: The index of the first item to be returned in the subset. batchSize: The number of items to be returned in the subset. sort: Valid values include null, an empty array of SortInfo, or an array of SortInfo where <SortInfo>.field is the name of a field on the input array elements or ""dot"" notation for a nested field. totalCount: The number of items in total. data: The data to be returned in the subset. identifiers: A parallel list of unique identifiers for each item in the subset. "
a!deployment(),"a!deployment(deploymentUuid, property)","deploymentUuid: The deployment to retrieve. The UUID is available from the post-deployment process or the deployment's log. property: The information to retrieve for this deployment. Properties are case-sensitive and the following properties are supported: name: The name of the deployment package. (Text) description: The description of the deployment package. (Text) uuid: The UUID of the deployment. (Text) auditUuid: The common UUID across environments that tracks a direct deployment and any related deployments completed using the Deploy to Another Environment option. (Text) status: The status of the deployment (Completed, Completed with Errors, Failed, In Progress, Pending, Rejected, Unavailable). (Text) applications: The list of applications that the deployments are for.(List of Application) packageType: The type of package (Patch or Application). (Text) objectsPackageId: The document ID for objects package zip file. (Integer) customizationFileId: The document ID for Import Customization property file. (Integer) databaseScriptsIds: The document IDs for database scripts in the order they are executed. (List of Integer) pluginsPackageId: The document ID for the zip file of plug-in JAR files. (Integer) logId: The ID of the deployment log. (Integer) source: The name of the source environment. (Text) target: The name of the target environment. (Text) objectsDeployed: The number of objects in the package that have been deployed. This includes successfully deployed objects and skipped objects. (Integer) objectsFailed: The number of objects in the package that have failed to deploy. (Integer) "
a!entityData(),"a!entityData(entity, data)",entity: This field holds a single Data Store Entity value in which the data to be updated is stored. data: This field holds multiple Any Type values to store in the entity. 
a!entityDataIdentifiers(),"a!entityDataIdentifiers(entity, identifiers)",entity: This field holds a single Data Store Entity value in which the data to be deleted is stored. identifiers: This field holds multiple Any Type values for the primary key values of the data to be deleted. 
a!executeStoredProcedureForQuery(),"a!executeStoredProcedureForQuery(dataSource, procedureName, inputs, timeout)","dataSource: The data source that contains the stored procedure. The value depends on how your data source is connected. For data source connected systems, enter the connected system constant. For data sources connected in the Admin Console, enter the name of the data source or a Text constant that stores the name. procedureName: Name of the stored procedure. Case sensitivity requirements are specific to each type of database. For Oracle and Db2 databases, enter the name in uppercase. For PostgreSQL databases, enter the name in lowercase. inputs: A list of names and values of the IN and INOUT parameters to the stored procedure created using a!storedProcedureInput(). An input must be provided for every IN and INOUT parameter. Case sensitivity requirements are specific to each type of database. For Oracle and Db2 databases, enter the parameter names in uppercase. For PostgreSQL databases, enter the parameter names in lowercase. timeout: The amount of time (in seconds) until the stored procedure execution is cancelled. Default: 30 seconds. "
a!fromJson(),a!fromJson(jsonText),jsonText: The text to convert from a JSON string to an Appian value. 
a!fromJson_19r2(),a!fromJson_19r2(jsonText),jsonText: The text to convert from a JSON string to an Appian value. 
a!getDataSourceForPlugin(),a!getDataSourceForPlugin(dataSourceConnectedSystem),dataSourceConnectedSystem: Constant that references a Data Source Connected System value. 
a!httpResponse(),"a!httpResponse(statusCode, headers, body)","statusCode: The status code of the response. Default is ""200"" meaning successful completion of the request. headers: A list of headers for the response. Built with a!httpheader(). Header values set using a!scsField() will be ignored. body: The body of the response. This value can be either text or a document. If a document is supplied, default headers will be set and the client browser will attempt to open the document. Some documents, such as images, sound files, and PDFs, can be effectively viewed within your browser window. Other documents, such as Microsoft Office files, may be downloaded for local viewing. "
a!httpResponse_17r4(),"a!httpResponse_17r4(statusCode, headers, body)","statusCode: The status code of the response. Default is ""200"" meaning successful completion of the request. headers: A list of headers for the response. Built with a!httpHeader(). body: The body of the response. "
a!iconIndicator(),a!iconIndicator(icon),icon: The key from the table of the icon to be returned. 
a!documentImage(),"a!documentImage(document, altText, caption, link, showWhen)","document: The image to display. altText: Alternate text of the image used for the image's alt attribute and read by screen readers; see accessibility considerations for more information. caption: Optional text to display in the mouseover text for the image and when the images is viewed in slideshow mode. link: Link that determines the behavior of an image when clicked. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() showWhen: Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true. "
a!iconNewsEvent(),"a!iconNewsEvent(icon, color)",icon: The key from the table of the icon to be returned. color: The key from the color table to be returned. Default color is blue. 
a!integrationError(),"a!integrationError(title, message, detail)","title: A short summary of the error or the error type. message: A description of the error. detail: Technical details about the error, including error codes or underlying error messages. "
a!jsonPath(),"a!jsonPath(value, expression)",value: The JSON text representing the value to be queried. expression: The JSONPath query to be run against the JSON object. 
a!latestHealthCheck()(),a!latestHealthCheck()(),
a!listViewItem(),"a!listViewItem(title, details, image, timestamp)","title: The name or short text description of the item. details: A longer text description of the item. image: The image to appear in the record list next to each item. Value must be entered as an expression. If left null or empty, the first two letters of the record title display. For image file types, a thumbnail of the document displays. For user values, the user's avatar displays. timestamp: The creation or modification timestamp of the item. "
a!pagingInfo(),"a!pagingInfo(startIndex, batchSize, sort)","startIndex: Index of the array in which to start returning values for the subset. Valid values include those greater than zero. batchSize: The number of items to return. When used with records, valid values are 0 to 5,000. When used with an entity, valid values include those greater than or equal to -1. See Using the batchSize parameter for more information about the allowed values. sort: Valid values include null, an empty array of SortInfo, or an array of SortInfo where <SortInfo>.field is the name of a field on the input array elements or ""dot"" notation for a nested field. "
a!query(),"a!query(selection, aggregation, logicalExpression, filter, pagingInfo)","selection: A list of fields that you wish to retrieve, created with a!querySelection(). aggregation: A list of fields and the operations you wish to perform on them when retrieving the data, created with a!queryAggregation(). logicalExpression: A set of conditions to apply to the queried data before any grouping or aggregation, created with a!queryLogicalExpression(). filter: A single condition to apply to the queried data before any grouping or aggregation, created with a!queryFilter(). pagingInfo: The paging and sorting configurations to apply when retrieving the data, created with a!pagingInfo(). "
a!queryAggregation(),a!queryAggregation(aggregationColumns),"aggregationColumns: A list of AggregationColumns that indicate which fields to group or aggregate, created with a!queryAggregationColumn. "
a!queryAggregationColumn(),"a!queryAggregationColumn(field, alias, visible, isGrouping, aggregationFunction, groupingFunction)","field: The dot-notation to the field of the data, such as a record type, you want to group together and/or aggregate. The fields cannot be complex or multiple values. alias: The short name by which the result of the AggregationColumn value can be referenced in other places of the Query value. Values are case-sensitive. visible: Determines whether the grouping or aggregation column should be visible to end users. If false, the data for the column will not be retrieved, but it can be used for sorting. Default value is true. isGrouping: Determines whether the field should be grouped. Default value is false. aggregationFunction: The function to use when aggregating the field. Valid values include COUNT, SUM, AVG, MIN, and MAX. Requires isGrouping to be false. groupingFunction: A function that can be applied on the selected field. Valid values are YEAR and MONTH. This parameter can only be used with Date and Date and Time data types. Requires isGrouping to be true. "
a!queryColumn(),"a!queryColumn(field, alias, visible)","field: The field of the data type you want to retrieve. The fields available depend on the source of the data and the data type of that source. alias: The short name by which the result of the Column value can be referenced in other areas of the Query value. Values are case-sensitive. visible: Determines whether the column should be visible to end users. If false, the data for the column will not be retrieved, but it can be used for sorting. Default value is true. "
a!queryEntity(),"a!queryEntity(entity, query, fetchTotalCount)","entity: The Data Store Entity to query. query: The query definition of the report including grouping, aggregation, filtering, paging, and sorting configurations, created with a!query(). fetchTotalCount: If set to false, avoids running the query that retrieves the total number of rows in the totalCount parameter of the resulting datasubset. In cases where you don't need the total count, skipping this query can improve the performance of a!queryEntity(). Default: false. "
a!queryEntity_18r3(),"a!queryEntity_18r3(entity, query)","entity: The Data Store Entity to query. query: The query definition of the report including grouping, aggregation, filtering, paging, and sorting configurations, created with a!query(). "
a!queryEntity_22r2(),"a!queryEntity_22r2(entity, query, fetchTotalCount)","entity: The Data Store Entity to query. query: The query definition of the report including grouping, aggregation, filtering, paging, and sorting configurations, created with a!query(). fetchTotalCount: If set to false, avoids running the query that retrieves the total number of rows in the totalCount parameter of the resulting datasubset. In cases where you don't need the total count, skipping this query can improve the performance of a!queryEntity(). Default: false. "
a!queryFilter(),"a!queryFilter(field, operator, value, applyWhen)","field: The name of the field or relationship to be filtered. When filtering record data, use the recordType! domain to reference a record field, related record field, or record type relationship. For example, recordType!Case.fields.caseName. When filtering data from a data store entity, use the field name in quotations. For example, ""department"". operator: Filter operator to apply to the data. Valid values: ""="", ""<>"", "">"", "">="", ""<"", ""<="", ""between"", ""in"", ""not in"", ""is null"", ""not null"", ""starts with"", ""not starts with"", ""ends with"", ""not ends with"", ""includes"", ""not includes"". value: The value to compare to the given field using the given operator. Can be entered as an expression. Optional if the operator value is ""is null"" or ""not null"". Filter is ignored if value is empty or null and operator is neither ""is null"" or ""not null"". applyWhen: Determines whether the filter is applied on the query. When set to false, the filter is not evaluated. Default: true. "
a!pickerFieldRecords(),"a!pickerFieldRecords(label, labelPosition, instructions, helpTooltip, placeholder, maxSelections, recordType, filters, value, saveInto, required, requiredMessage, readOnly, disabled, validations, validationGroup, accessibilityText, showWhen, showRecordLinks)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". placeholder: Text to display in the field when it is empty. Does not show if the field is read only. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. recordType: Required, singular. Filters picker to select records of this type. filters: A single logical expression or a list of query filters can be provided to apply additional filters to the record set. Queries inherit the default filters defined on the referenced record type. Service-backed record types can only be filtered using a logical expression if data sync is enabled. value: Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected. saveInto: One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. showRecordLinks: Determines whether selected records display links to their summary views. Default: true. "
a!queryRecordType(),"a!queryRecordType(recordType, fields, filters, pagingInfo, fetchTotalCount, relatedRecordData)","recordType: A reference to a record type. You must reference the record type directly from the recordType! domain. For example, recordType!Case. fields: Fields to be retrieved for the query. This parameter accepts different values depending on the type of query to run. When performing a selection, use a list of record field or related record field references defined with the recordType! domain. When performing an aggregation, use a!aggregationFields() to define the configuration for the aggregated fields. filters: A single logical expression or a list of query filters can be provided to apply additional filters to the record set. Queries also inherit the default filters defined on the referenced record type. Reference record fields or related record fields from the specified record type using the recordType! domain. Record types sourced from a web service or other expression only support this parameter if the data is synced. pagingInfo: The paging and sorting configurations to apply when retrieving the record data. fetchTotalCount: This parameter is only used when querying unsynced record types that use a database as the source. Synced record types automatically return the totalCount property. If set to true, a separate query returns the total number of records in the totalCount property of the query result. In cases where you don't need the totalCount, omitting this parameter can improve performance. relatedRecordData: When selecting one-to-many related record data, use a!relatedRecordData() to filter, sort, and limit the related record sets. This parameter is not supported when performing an aggregation. "
a!recordData(),"a!recordData(recordType, filters, relatedRecordData)","recordType: A reference to a record type, configured using the recordType! domain. For example, recordType!Employee. filters: A single logical expression or a list of query filters, which are applied together with an AND operation, can be provided to apply additional filters to the record set. Queries also inherit the default filters defined on the referenced record type. When filtering, use only record fields or related record fields from the referenced record type. Record types sourced from a web service or other expression only support this parameter if the data is synced. relatedRecordData: When selecting one-to-many related record data, use a!relatedRecordData() to filter, sort, and limit the related record sets. This parameter is only supported when a!recordData is used in a read-only grid. "
a!recordFilterListOption(),"a!recordFilterListOption(id, name, filter, dataCount)",id: The unique identifier for the filter option. This must be unique across other filter options within the same user filter. name: The name of the filter option that is displayed to users. filter: The QueryFilter value that will be sent by the framework when this filter option is selected. dataCount: An optional value that defines how many items in the data set will be selected if this filter option is selected. 
a!query(),"a!query(selection, aggregation, logicalExpression, filter, pagingInfo)","selection: A list of fields that you wish to retrieve, created with a!querySelection(). aggregation: A list of fields and the operations you wish to perform on them when retrieving the data, created with a!queryAggregation(). logicalExpression: A set of conditions to apply to the queried data before any grouping or aggregation, created with a!queryLogicalExpression(). filter: A single condition to apply to the queried data before any grouping or aggregation, created with a!queryFilter(). pagingInfo: The paging and sorting configurations to apply when retrieving the data, created with a!pagingInfo(). "
a!queryLogicalExpression(),"a!queryLogicalExpression(operator, logicalExpressions, filters, ignoreFiltersWithEmptyValues)","operator: Determines the operation to apply to the set filters. Valid values: ""AND"", ""OR"", and ""AND_ALL"". The “AND_ALL” operator is only valid when filtering on multiple fields from a one-to-many relationship. logicalExpressions: A list of LogicalExpression objects to apply using the operator parameter, created with a!queryLogicalExpression(). filters: A list of QueryFilters to apply using the operator parameter, created with a!queryFilter(). ignoreFiltersWithEmptyValues: Specifies whether to ignore filters within a!queryLogicalExpression() if the filter’s value parameter is empty. If you are using nested logical expressions, this parameter must have the same value for each logical expression. For example, if the value is set to true for the parent logical expression, it should be set to true for all children logical expressions. Default: false "
a!queryProcessAnalytics(),"a!queryProcessAnalytics(report, query, contextGroups, contextProcessIds, contextProcessModels, contextUsers)","report: .arf document containing the report configuration. query: An optional query object containing paging and extra filters, created with a!query(). If no query is provided, the default paging from the report is used. contextGroups: One or more groups to pass to the report context. contextProcessIds: One or more process ids to pass to the report context. contextProcessModels: One or more process models to pass to the report context. contextUsers: One or more users to pass to the report context. "
a!querySelection(),a!querySelection(columns),"columns: A list of Columns that indicate which fields to retrieve, created with a!queryColumn(). "
a!recordFilterChoices(),"a!recordFilterChoices(choiceLabels, choiceValues)",choiceLabels: The list of text to be displayed to the user as the filter choices. choiceValues: The list of values associated with the available choices. 
a!recordFilterDateRange(),"a!recordFilterDateRange(name, field, isVisible, defaultFrom, defaultTo)","name: Name of the date range user filter. field: The record field or related record field the filter will apply to. isVisible: Determines whether the filter is visible to the user. Default is true. defaultFrom: Determines the default start date, if any, for the date range filter. defaultTo: Determines the default end date, if any, for the date range filter. "
a!recordFilterDateRange_20r2(),"a!recordFilterDateRange_20r2(name, field, defaultFrom, defaultTo, isVisible)","name: The name of the user filter that displays to end users. field: The name of the field the filter will apply to. defaultFrom: Determines which, if any, starting date is applied when a record list first loads. defaultTo: Determines which, if any, ending date is applied when a record list first loads. isVisible: Determines whether the filter is visible to the user at runtime. Default is true. "
a!recordFilterList(),"a!recordFilterList(name, options, defaultOption, isVisible, allowMultipleSelections)","name: The name of the user filter that displays to end users. options: The options that users can select from for a given user filter. defaultOption: Determines which, if any, filter option is applied when a record list first loads. isVisible: Determines whether the filter is visible to the user at runtime. Default is true. allowMultipleSelections: Determines whether the filter allows the user to select multiple options or a single option. Default is true. "
a!recordFilterListOption(),"a!recordFilterListOption(id, name, filter, dataCount)",id: The unique identifier for the filter option. This must be unique across other filter options within the same user filter. name: The name of the filter option that is displayed to users. filter: The QueryFilter value that will be sent by the framework when this filter option is selected. dataCount: An optional value that defines how many items in the data set will be selected if this filter option is selected. 
a!sentimentScore(),a!sentimentScore(text),"text: The text values from which to extract sentiment scores. For best results, use values that are about the length of a sentence. "
a!sortInfo(),"a!sortInfo(field, ascending)","field: The name of the field used to sort by. When sorting record data, use the recordType! domain to reference a record field or related record field. For example, recordType!Case.fields.caseName. When sorting data from a data store entity, use the field name in quotations. For example, ""department"". When sorting on aggregate data, you must use the alias as the sort field if an alias is defined in the groupings or measures. ascending: Determines what order the data is sorted in. Sorted in ascending order when the value is true and descending order when the value is false. Default: false. "
a!storedProcedureInput(),"a!storedProcedureInput(name, value)",name: Name of the input to the stored procedure. value: Value of the input to be passed to the stored procedure. 
a!submitUploadedFiles(),"a!submitUploadedFiles(onSuccess, onError)",onSuccess: A list of saves to execute after the uploaded files are submitted successfully to the target folder. onError: A list of saves to execute after the uploaded files are not submitted successfully to the target folder. Use fv!error to access the returned error. 
a!fileUploadField(),"a!fileUploadField(label, labelPosition, instructions, helpTooltip, target, fileNames, fileDescriptions, maxSelections, value, saveInto, required, requiredMessage, disabled, validations, validationGroup, buttonStyle, buttonSize, accessibilityText, showWhen, uploadMethods, buttonDisplay, placeholder, showVirusScanMessage)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". target: Determines the eventual location of the uploaded files. fileNames: Determines the names for the files. When not provided, the uploaded filenames are used. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index. fileDescriptions: Determines the descriptions for the files. When not provided, the descriptions of the new files are empty. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index. maxSelections: Maximum number of allowed files. Once this number is reached, further uploads are blocked until a file is removed. value: The files associated with this field. saveInto: One or more variables that are updated with the files when the user uploads files. Removing all uploaded files saves a null document. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the field should display as potentially editable but grayed out. When files are present in this state, they may not be deleted. Default: false. validations: Validation errors to display below the field when the value is not null. Access the names, sizes, and extensions of the uploaded files using the variables fv!files.name, fv!files.size, and fv!files.extension. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. buttonStyle: Determines the style of the upload button. Valid values: ""NORMAL"" Displays the label and border in the accent color. ""PRIMARY"" Displays the label in white on an accent color background. ""SECONDARY"" (default) Displays the label and border in gray. ""LINK"" Displays the label in the accent color and has no border until focused. buttonSize: Determines the size of the upload button. Valid values: ""SMALL"" (default), ""STANDARD"", ""LARGE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. uploadMethods: (Mobile only) Determines which mobile upload methods are displayed to users. If one method is specified, the upload button will be customized. Multiple may be applied. If value is null, all methods are provided. Valid values include: null (Default),“SIGNATURE”, “CAMERA”, “CHOOSE_PHOTO”, “CHOOSE_FILE”. buttonDisplay: Determines if the file upload will display a button with a label or an icon. Valid values: ""LABEL"", ""ICON"", and ""LABEL_AND_ICON"". Default behavior displays ""LABEL"" on web and ""LABEL_AND_ICON"" on mobile. placeholder: Text to display when no file is uploaded. Default: ""Drop files here"". showVirusScanMessage: Determines whether the ""Scanning for viruses"" message appears during file upload. When set to false, the message is hidden, but the file is still scanned for viruses. An error message will still appear if real-time virus scanning is enabled and the uploaded file contains a virus. Default: true. "
a!signatureField(),"a!signatureField(label, labelPosition, instructions, helpTooltip, target, fileName, fileDescription, value, saveInto, required, requiredMessage, buttonStyle, buttonSize, readOnly, disabled, validationGroup, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". target: Determines the eventual location of the saved signature file. fileName: Determines the name for the signature file. When not provided, the timestamp will be used. fileDescription: Determines the description for the signature file. When not provided, the description of the new file is empty. value: The signature file associated with this field. saveInto: Variable that is updated with the signature file when the user saves a signature. Removing a signature file removes the document and saves a null. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the value of the field is required but not provided. buttonStyle: Determines the style of the signature button. Valid values: ""PRIMARY"", ""SECONDARY"" (default), ""STANDARD"", ""LINK"". buttonSize: Determines the size of the signature button. Valid values: ""SMALL"" (default), ""STANDARD"", ""LARGE"". readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. When a signature is present in this state, it may not be deleted. Default: false. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!toJson(),"a!toJson(value, removeNullOrEmptyFields)","value: The value to convert into a JSON string. removeNullOrEmptyFields: Determines whether fields with values that are null, empty strings, or empty arrays are removed from the JSON output. Default: false. "
a!toJson_17r1(),a!toJson_17r1(value),value: The value to convert into a JSON string. 
a!toRecordIdentifier(),"a!toRecordIdentifier(recordType, identifier)",recordType: The record type that contains the record. identifier: Individual record IDs within the record type. 
a!userRecordFilterList()(),a!userRecordFilterList()(),
a!userRecordFilterList_22r3()(),a!userRecordFilterList_22r3()(),
a!userRecordIdentifier(),a!userRecordIdentifier(users),users: The array of users for whom record identifiers are to be created. 
a!userRecordListViewItem(),a!userRecordListViewItem(record),"record: The reference to the current User record, provided via rv!record. "
a!userRecordListViewItem_22r3(),a!userRecordListViewItem_22r3(record),"record: The reference to the current User record, provided via rv!record. "
a!map(),"a!map(key1, keyN)","key1: A key value pair to store in the map. The value is not wrapped in a variant. keyN: Any additional key value pairs, as needed. "
a!queryRecordType(),"a!queryRecordType(recordType, fields, filters, pagingInfo, fetchTotalCount, relatedRecordData)","recordType: A reference to a record type. You must reference the record type directly from the recordType! domain. For example, recordType!Case. fields: Fields to be retrieved for the query. This parameter accepts different values depending on the type of query to run. When performing a selection, use a list of record field or related record field references defined with the recordType! domain. When performing an aggregation, use a!aggregationFields() to define the configuration for the aggregated fields. filters: A single logical expression or a list of query filters can be provided to apply additional filters to the record set. Queries also inherit the default filters defined on the referenced record type. Reference record fields or related record fields from the specified record type using the recordType! domain. Record types sourced from a web service or other expression only support this parameter if the data is synced. pagingInfo: The paging and sorting configurations to apply when retrieving the record data. fetchTotalCount: This parameter is only used when querying unsynced record types that use a database as the source. Synced record types automatically return the totalCount property. If set to true, a separate query returns the total number of records in the totalCount property of the query result. In cases where you don't need the totalCount, omitting this parameter can improve performance. relatedRecordData: When selecting one-to-many related record data, use a!relatedRecordData() to filter, sort, and limit the related record sets. This parameter is not supported when performing an aggregation. "
a!queryRecordType_20r4(),"a!queryRecordType_20r4(recordType, selection, filters, pagingInfo, fetchTotalCount)","recordType: A reference to a record type. You must reference the record type directly from the recordType! domain. For example, recordType!Case. selection: List of record fields to be retrieved from the query. Record fields must be directly referenced from the recordType! domain. For example: recordType!Case.fields.caseName. When no record fields are specified, all record fields are returned in the order they are configured in the record type's data model. filters: A single logical expression or a list of query filters can be provided to filter the results. Without a logical expression, a list of query filters will only return those records where all filters evaluate to true (AND comparisons). Queries also apply the default filters defined on the referenced record type. pagingInfo: The paging and sorting configurations to apply when retrieving the record data. fetchTotalCount: If set to true, runs a separate query that retrieves the total number of records in the totalCount parameter of the query result. In cases where you don't need the totalCount, skipping this additional query can improve performance. Can only be used with record types that source from a data store entity. "
a!recordData(),"a!recordData(recordType, filters, relatedRecordData)","recordType: A reference to a record type, configured using the recordType! domain. For example, recordType!Employee. filters: A single logical expression or a list of query filters, which are applied together with an AND operation, can be provided to apply additional filters to the record set. Queries also inherit the default filters defined on the referenced record type. When filtering, use only record fields or related record fields from the referenced record type. Record types sourced from a web service or other expression only support this parameter if the data is synced. relatedRecordData: When selecting one-to-many related record data, use a!relatedRecordData() to filter, sort, and limit the related record sets. This parameter is only supported when a!recordData is used in a read-only grid. "
a!testRunResultForId(),a!testRunResultForId(testRunId),testRunId: The test-run ID returned when executing a test on a system or applications. 
a!testRunStatusForId(),a!testRunStatusForId(testRunId),testRunId: The test-run ID for the test run you want to check on. 
cents(),"cents(number, decimals)",number: The number of cents to be returned as text. decimals: The number of digits after the decimal to display. 
char(),char(number),number: The Unicode decimal value of the character to return. 
charat(),"charat(text, index)","text: The text string to find the character. index: The integer index position of the character, starting at one (1). "
clean(),clean(text),"text: The text to be ""cleaned"" for printing purposes. "
cleanwith(),"cleanwith(text, with)","text: The text to be ""cleaned"" for printing purposes. with: The text allowed in the ""cleaned"" result. "
code(),code(text),text: The text to be converted into Unicode codes. 
concat(),concat(text),text: One of the strings or a set of strings that will be concatenated. 
a!currency(),"a!currency(isoCode, value, decimalPlaces, showSeparators, format, indicatorAlignment)","isoCode: A valid ISO currency code. For example, ""USD"" or ""EUR"". This parameter is required. value: The value to be formatted. decimalPlaces: Number of digits to display after the decimal mark. By default, it uses the localized format of the currency code. It also rounds to the specified decimal place. Valid values: 17 to -17. showSeparators: Optional flag indicating whether to display digit separators. For example, the comma in 1,234.56. Default: true. format: Optional field to specify how the currency should be formatted. Valid values: ""LOCALE"" (default), ""CODE"", ""SYMBOL"". For example, ""CODE"" would use USD and ""SYMBOL"" would use $. ""LOCALE"" would use either ""CODE"" or ""SYMBOL"" depending on the locale. indicatorAlignment: Determines the alignment format. Valid values: ""LOCALE"" (default), ""START"", ""END"". For example $1,234.56 or 1.234,56 $. ""LOCALE"" would use either ""START"" or ""END"" depending on the locale. "
currency_22r4(),"currency_22r4(number, decimals)",number: The number of currency units to be returned as text. decimals: The number of digits after the decimal to display. 2 by default. 
exact(),"exact(text1, text2)",text1: One of two strings that will be compared. text2: The other string that will be compared. 
extract(),"extract(text, startDelimiter, endDelimiter)",text: The text from which to extract the delimited string. startDelimiter: String for the start delimiter. endDelimiter: String for the end delimiter. 
extractanswers(),"extractanswers(questions, text)",questions: Array of questions. text: Text representing the questions and answers. 
find(),"find(search_text, within_text, start_num)",search_text: The text that will be searched for. within_text: The text that will be searched in. start_num: The index of the first character within the within_text value from which to start searching. 1 by default. 
fixed(),"fixed(number, decimals, no_commas)","number: The number that the fixed function will prepare for display. decimals: The number of digits after the decimal that will be maintained. 2 by default. no_commas: Enter false to display commas, true to hide them. False by default. "
a!formatPhoneNumber(),"a!formatPhoneNumber(phoneNumber, countryCode, outputFormat)","phoneNumber: A text value representing a phone number. Dashes, parentheses, periods, and blank spaces are allowed as separators. This parameter is required. countryCode: One or more country codes used to validate the provided phone number. Country codes are represented as a two-letter ISO Alpha-2 code. For example, ""US"", ""GB"", and ""DE"" are the country codes for the United States, Great Britain, and Germany. If multiple codes are provided, the phone number will validate as the first country code that matches the provided phone number. outputFormat: Specifies the format of the returned phone number. Valid values are ""NATIONAL"", ""INTERNATIONAL"", ""E164"", and ""RFC3966"". Default is ""E164"". "
initials(),initials(text),text: The text containing uppercase to be returned. 
insertkey(),"insertkey(key, startDelimiter, endDelimiter)",key: A key or array of keys. startDelimiter: String for the start delimiter. endDelimiter: String for the end delimiter. 
insertkeyval(),"insertkeyval(key, value, startDelimiter, endDelimiter)",key: A key or array of keys. value: A value or array of values. startDelimiter: String for the start delimiter. endDelimiter: String for the end delimiter. 
insertquestions(),insertquestions(questions),questions: Array of strings to be created as questions. 
a!isPhoneNumber(),"a!isPhoneNumber(phoneNumber, countryCode)","phoneNumber: A text value representing a phone number. Dashes, parentheses, periods, and blank spaces are allowed as separators. This parameter is required. countryCode: One or more country codes used to validate the provided phone number. Country codes are represented as a two-letter ISO Alpha-2 code. For example, ""US"", ""GB"", and ""DE"" are the country codes for the United States, Great Britain, and Germany. If multiple codes are provided, the function will return true when the provided phone number matches one of the country codes. "
keyval(),"keyval(text, keys, separators, delimiters)",text: The text to parse. keys: Array of keys. separators: Array of key-value separators. delimiters: Array of delimiters specifying the end of a value. 
left(),"left(text, num_chars)",text: The text from which the substring will be taken. num_chars: The length in characters of the subtext to extract. 
leftb(),"leftb(text, num_bytes)",text: The text from which the substring will be taken. num_bytes: The length in bytes of the subtext to extract. 
len(),len(text),"text: The text, the length of which will be returned. "
lenb(),lenb(text),"text: The text, the length of which in bytes will be returned. "
like(),"like(stringA, stringB)",stringA: Text to match stringB: List the characters to match. 
lower(),lower(text),text: The text to be converted into lowercase (Unicode case folded). 
mid(),"mid(text, start_num, num_chars)",text: The text from which the substring will be extracted. start_num: The positional index of the first character of the substring to be returned. num_chars: The length in characters of the substring to extract. 
midb(),"midb(text, start_num, num_bytes)",text: The text from which the substring will be extracted. start_num: The positional index in bytes of the first byte of the substring to be returned. num_bytes: The length in bytes of the substring to extract. 
padleft(),"padleft(text, length)",text: The text to be padded. length: The target number of characters desired in the final text. 
padright(),"padright(text, length)",text: The text to be padded. length: The target number of characters desired in the final text. 
proper(),proper(text),text: The text to convert into proper case. 
replace(),"replace(old_text, start_num, num_chars, new_text)",old_text: The original text before replacement. start_num: The positional index of the first character of the substring to be replaced. num_chars: The length in characters of the substring to be replaced. new_text: The text that will be inserted into the old text in place of the extricated substring. 
replaceb(),"replaceb(old_text, start_num, num_chars, new_text)",old_text: The original text before replacement. start_num: The positional index in bytes of the first byte of the substring to be replaced. num_chars: The length in bytes of the substring to be replaced. new_text: The text that will be inserted into the old text in place of the extricated substring. 
rept(),"rept(text, repetitions)",text: The text to be repeated. repetitions: The number of times the text will be repeated. The original text is not counted as a repetition. 
resource(),resource(key),key: The item paired with each desired translation in your resource bundle. 
right(),"right(text, num_chars)",text: The text from which the substring will be taken. num_chars: The length in characters of the subtext to extract. 
search(),"search(search_text, within_text, start_num)",search_text: The text that will be searched for. within_text: The text that will be searched in. start_num: The index of the first character within the within_text value from which to start searching. 1 by default. 
searchb(),"searchb(search_text, within_text, start_num)",search_text: The text that will be searched for. within_text: The text to be searched. start_num: The index of the within_text value from which to start searching. 1 by default. 
soundex(),soundex(text),text: The text to be converted. 
split(),"split(text, separator)",text: The text to be split. separator: The text delimiter by which the text will be separated. 
strip(),strip(text),"text: The text to be ""stripped"" for printing purposes. "
stripHtml(),stripHtml(html),"html: the html text to be ""stripped"" of tags and converted to plain text. "
stripwith(),"stripwith(text, with)","text: The text to be ""stripped"" for printing purposes. with: The text disallowed in the ""stripped"" result. "
substitute(),"substitute(text, find, replace_with)",text: The string to be modified. find: The part of the string that will be replaced. replace_with: The replacement substring. 
a!swissFranc(),"a!swissFranc(number, decimals, noApostrophes, showPrefixSymbol)","number: The number of Swiss francs to be returned as text. decimals: (Integer) The number of digits after the decimal to display. 2 by default. noApostrophes: (Integer) This parameter is optional and can be 0 or 1. By default this value is 0. When 0, the Swiss franc value will be separated by apostrophes every three digits preceding the decimal. When 1, the Swiss franc value is not separated by apostrophes. showPrefixSymbol: (Integer) This parameter is optional and can be 0 or 1. By default this value is 0. When 1, the Swiss franc value will be prefixed by the symbol 'CHF', otherwise, no symbol will be prefixed to the Swiss franc value. "
text(),"text(value, format)","value: The value to convert to a text string. format: The output format string, supporting ""date/time"" format, ""positive"" format, ""positive;negative"" format or ""positive;negative;zero"" format. "
toHtml(),toHtml(text),text: The string of text to be converted to HTML 
trim(),trim(text),text: The string of text from which unnecessary spaces are to be removed. 
upper(),upper(text),text: The string of characters to be converted into uppercase. 
value(),"value(text, format)","text: The string of characters to be converted into a number or date. format: The input format of the value, such as ""mm/dd/yyyy"". "
acos(),acos(number),"number: A number or array of numbers, the arccosine(s) of which will be returned. "
acosh(),acosh(number),"number: A number or array of numbers, the hyperbolic arccosine(s) of which will be returned. "
asin(),asin(number),"number: A number or array of numbers, the arcsine(s) of which will be returned. "
asinh(),asinh(number),"number: A number or array of numbers, the hyperbolic arcsine(s) of which will be returned. "
atan(),atan(number),"number: A number or array of numbers, the arctangent(s) of which will be returned. "
atanh(),atanh(number),"number: A number or array of numbers, the hyperbolic arctangent(s) of which will be returned. "
cos(),cos(number),"number: An angle measure or array of angle measures in radians, the cosine(s) of which will be returned. "
cosh(),cosh(number),"number: An angle measure or array of angle measures in radians, the hyperbolic cosine(s) of which will be returned. "
degrees(),degrees(angle_in_radians),angle_in_radians: An angle measure or array of angle measures that will be converted into degrees. 
radians(),radians(angle_in_degrees),angle_in_degrees: An angle measure that will be converted into radians. 
sin(),sin(number),"number: An angle measure or array of angle measures in radians, the sine(s) of which will be returned. "
sinh(),sinh(number),"number: An angle measure or array of angle measures in radians, the hyperbolic sine(s) of which will be returned. "
tan(),tan(number),"number: An angle measure or array of angle measures in radians, the tangent(s) of which will be returned. "
tanh(),tanh(number),"number: An angle measure or array of angle measures in radians, the hyperbolic tangent(s) of which will be returned. "
a!areaChartField(),a!areaChartField(labelinstructionscategoriesseriesxAxisTitleyAxisTitleyAxisMinyAxisMaxstackingreferenceLinesshowLegendshowDataLabelsshowTooltipsallowDecimalAxisLabelslabelPositionhelpTooltipshowWhenconnectNullsaccessibilityTextcolorSchemeheightxAxisStyleyAxisStyledataconfigrefreshAlwaysrefreshIntervalrefreshOnReferencedVarChangerefreshOnVarChangerefreshAfter),"label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text, Date, or Date and Time array to display on the x-axis below each data point. If you are using an array of Date or Date and Time, make sure the data is sorted prior to using it as a category. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (horizontal) axis. yAxisTitle: Title for the dependent (vertical) axis. yAxisMin: Determines the minimum displayed point on the vertical axis. yAxisMax: Determines the maximum displayed point on the vertical axis. stacking: Determines if series values display as stacked, or stacked to a height of 100% to show the contribution to the whole, or overlapping. Valid values: ""NORMAL"" (default), ""PERCENT_TO_TOTAL"", ""NONE"". referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed next to each data point. Default: false. showTooltips: Determines if a tooltip displays the data value for each data point. Default: true. allowDecimalAxisLabels: Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. connectNulls: Determines whether to connect an area across null points, or render a gap between the two points on either side of the null. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"" (default), ""TALL"". See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!areaChartConfig(). Only applies when using a record type as a source in the data parameter. refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". "
a!columnChartField(),"a!columnChartField(label, instructions, categories, series, xAxisTitle, yAxisTitle, yAxisMin, yAxisMax, stacking, referenceLines, showLegend, showDataLabels, showTooltips, allowDecimalAxisLabels, labelPosition, helpTooltip, accessibilityText, showWhen, colorScheme, height, xAxisStyle, yAxisStyle, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text to display on the X-Axis next to each column. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (horizontal) axis. yAxisTitle: Title for the dependent (vertical) axis. yAxisMin: Determines the minimum displayed point on the vertical axis. yAxisMax: Determines the maximum displayed point on the vertical axis. stacking: Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: ""NONE"" (default), ""NORMAL"", ""PERCENT_TO_TOTAL"". referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed on each column. Default: false. showTooltips: Determines if a tooltip displays the data value for a column. Default: true. allowDecimalAxisLabels: Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"" (default), ""TALL"". See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!columnChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!areaChartConfig(),a!areaChartConfig(primaryGroupingsecondaryGroupingmeasuressortdataLimitlinkshowIntervalsWithNoData),"primaryGrouping: Defines the field labels to display on the axis in the chart, configured using a!grouping(). secondaryGrouping: Defines the field labels to display in the series of stacked or overlapping data points in the chart, configured using a!grouping(). measures: Defines the numerical calculations for data in the chart, configured using a!measure(). If no measure is provided, a count of records shows as the measurement in the chart. sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using a!dynamicLink(). showIntervalsWithNoData: Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: false. "
a!barChartField(),"a!barChartField(label, instructions, categories, series, xAxisTitle, yAxisTitle, yAxisMin, yAxisMax, stacking, referenceLines, showLegend, showDataLabels, showTooltips, allowDecimalAxisLabels, labelPosition, helpTooltip, accessibilityText, showWhen, colorScheme, height, xAxisStyle, yAxisStyle, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text to display on the x-axis next to each bar. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (vertical) axis. yAxisTitle: Title for the dependent (horizontal) axis. yAxisMin: Determines the minimum displayed point on the horizontal axis. yAxisMax: Determines the maximum displayed point on the horizontal axis. stacking: Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: ""NONE"" (default), ""NORMAL"", ""PERCENT_TO_TOTAL"". referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed next to each bar. Default: false. showTooltips: Determines if a tooltip displays the data value for a bar. Default: true. allowDecimalAxisLabels: Allows dependent (horizontal) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"", ""TALL"", ""AUTO"" (default). See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!barChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!barChartField_21r4(),"a!barChartField_21r4(label, instructions, categories, series, xAxisTitle, yAxisTitle, yAxisMin, yAxisMax, stacking, referenceLines, showLegend, showDataLabels, showTooltips, allowDecimalAxisLabels, labelPosition, helpTooltip, accessibilityText, showWhen, colorScheme, height, xAxisStyle, yAxisStyle, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text to display on the x-axis next to each bar. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (vertical) axis. yAxisTitle: Title for the dependent (horizontal) axis. yAxisMin: Determines the minimum displayed point on the horizontal axis. yAxisMax: Determines the maximum displayed point on the horizontal axis. stacking: Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: ""NONE"" (default), ""NORMAL"", ""PERCENT_TO_TOTAL"". referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed next to each bar. Default: false. showTooltips: Determines if a tooltip displays the data value for a bar. Default: true. allowDecimalAxisLabels: Allows dependent (horizontal) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"", ""TALL"", ""AUTO"" (default). See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!barChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!barChartConfig(),"a!barChartConfig(primaryGrouping, secondaryGrouping, measures, sort, dataLimit, link, showIntervalsWithNoData)","primaryGrouping: Defines the field labels to display on the axis in the chart, configured using a!grouping(). secondaryGrouping: Defines the field labels to display in the stacking or grouped bars in the chart, configured using a!grouping(). measures: Defines the numerical calculations for data in the chart, configured using a!measure(). If no measure is provided, a count of records shows as the measurement in the chart. sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using `a!dynamicLink(). showIntervalsWithNoData: Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: false. "
a!barcodeField(),"a!barcodeField(label, labelPosition, instructions, acceptedTypes, value, saveInto, refreshAfter, required, requiredMessage, readOnly, disabled, validations, validationGroup, align, placeholder, helpTooltip, masked, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. acceptedTypes: Determines the types of barcodes that are accepted in the field. Null results in all types being accepted. Valid values: ""CODE39"", ""CODE93"", ""CODE128"", ""DATAMATRIX"", ""EAN8"", ""EAN13"", ""PDF417"", ""QRCODE"", ""UPCA"", ""UPCE"". value: Text to display in the field. saveInto: One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. align: Determines alignment of the text value. Valid values: ""LEFT"" (default), ""CENTER"", ""RIGHT"". placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". masked: Determines if the value is obscured from view. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!billboardLayout(),"a!billboardLayout(backgroundMedia, backgroundColor, showWhen, height, marginBelow, overlay, accessibilityText, marginAbove)","backgroundMedia: Determines the background content. Takes priority over background color. Configure using a!documentImage, a!userImage, a!webImage, or a!webVideo. backgroundColor: Determines the background color. When background media is also specified, the background color shows while media is loading or when background image is transparent. Must be a valid hex code. Default is #f0f0f0. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. height: Determines the layout height. Valid values: ""EXTRA_SHORT"", ""SHORT"", ""SHORT_PLUS"", ""MEDIUM"" (default), ""MEDIUM_PLUS"", ""TALL"", ""TALL_PLUS"", ""EXTRA_TALL"", ""AUTO"". Auto renders as medium when no background media is set. marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". overlay: Determines the overlay. Configure using a!columnOverlay, a!barOverlay, or a!fullOverlay. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". "
a!boxLayout(),"a!boxLayout(label, contents, style, showWhen, isCollapsible, isInitiallyCollapsed, marginBelow, accessibilityText, padding, shape, marginAbove, showBorder, showShadow, labelSize, labelHeadingTag)","label: Text to display as the box's title. contents: Components and layouts to display within the box. style: Determines the color of the label and box outline. Valid values: Any valid hex color or ""STANDARD"" (default), ""ACCENT"", ""SUCCESS"", ""INFO"", ""WARN"", ""ERROR"". showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. isCollapsible: Determines if an expand/collapse control appears in the box header. Default: false. isInitiallyCollapsed: Determines if the box is collapsed when the interface first loads. Default: false. marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. padding: Determines the space between the box edges and its contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"" (default), ""STANDARD"", ""MORE"", ""EVEN_MORE"". shape: Determines the box shape. Valid values: ""SQUARED"" (default), ""SEMI_ROUNDED"", ""ROUNDED"". marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". showBorder: Determines whether the layout has an outer border. Default: true. showShadow: Determines whether the layout has an outer shadow. Default: false. labelSize: Determines the label size. Valid values: ""LARGE_PLUS"", ""LARGE"", ""MEDIUM_PLUS"", ""MEDIUM"", ""SMALL"", ""EXTRA_SMALL"" (default). labelHeadingTag: Determines the heading tag associated with the label for use by screen readers; produces no visible change. Valid values: ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"". The default is dependent on the chosen label size. See accessibility design guidance for more details to associate the proper heading tag with the box label to follow accessibility standards. "
a!richTextBulletedList(),"a!richTextBulletedList(items, showWhen)","items: Array of text to display as a bulleted list. Text can be further formatted using a!richTextItem(). Nested lists can be created using a!richTextListItem(). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!buttonArrayLayout(),"a!buttonArrayLayout(buttons, showWhen, align, marginBelow, accessibilityText)","buttons: Array of buttons created with a!buttonWidget(). showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. align: Determines alignment of the button(s). Valid values: ""START"", ""CENTER"", ""END"". marginBelow: Determines how much space is added below the buttons. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!buttonWidget(),"a!buttonWidget(label, style, confirmMessage, value, saveInto, disabled, submit, validate, validationGroup, size, width, confirmHeader, confirmButtonLabel, cancelButtonLabel, showWhen, icon, accessibilityText, tooltip, recaptchaSaveInto, loadingIndicator)","label: Optional text to display on the button. style: Determines the color of the button, where ""NORMAL"" default) Displays it with accent color label and border. ""PRIMARY"" Displays it in the accent color. ""SECONDARY"" Displays it in gray. ""LINK"" Displays it with an accent color label and no border until focused. ""DESTRUCTIVE"" Displays it in red. confirmMessage: Text to display in an optional confirmation dialog where a null argument disables the confirmation dialog and a text argument enables it with the text entered as the confirmation message. value: The value associated with this button. saveInto: One or more variables that are updated with the button value when the user presses it. Use a!save() to save a modified or alternative value to a variable. disabled: Determines if the user is prevented from clicking the button and triggering the state change. Default is false. submit: Determines whether this button submits a form after saving its value. validate: Determines whether this button performs validation before saving its value. When submit is true, this defaults to true, otherwise it defaults to false. validationGroup: When present, components in the same validation group are validated when this button is clicked. size: Determines the size of the button. Valid values: ""SMALL"", ""STANDARD"" (default), and ""LARGE"". width: Determines button width. Valid values are ""MINIMIZE"" and ""FILL"". Default behavior displays ""FILL"" width buttons on phone size screens and ""MINIMIZE"" buttons on wider screens. ""MINIMIZE"" width is determined by button label. ""FILL"" width fills the button container. confirmHeader: Text to display at the top of the confirmation dialog. confirmButtonLabel: Text to display on the confirmation button. Default: ""Yes"". cancelButtonLabel: Text to display on the cancel button. Default: ""No"". showWhen: Determines whether the button is displayed on the interface. When set to false the button is hidden and is not evaluated. Default: true. icon: Icon to display before any text inside the button. See the list of available icons. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. tooltip: Text to display on mouseover (web) or long press (mobile). recaptchaSaveInto: One or more variables that are updated after reCAPTCHA executes. Use a!verifyRecaptcha() to verify the reCAPTCHA result and a!save() to save a modified or alternative value to a variable. Only for use in Portals. loadingIndicator: Determines whether the button will display a loading indicator on press and be disabled while processing. Default: false. "
a!buttonLayout(),"a!buttonLayout(primaryButtons, secondaryButtons, accessibilityText, showWhen)","primaryButtons: Array of prominent buttons created with a!buttonWidget(). secondaryButtons: Array of less prominent buttons created with a!buttonWidget(). accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. "
a!colorSchemeCustom(),a!colorSchemeCustom(Colors),Colors: List of colors to use in the custom color scheme. Valid values: any valid hex colors. Maximum colors allowed: 12. 
a!chartReferenceLine(),"a!chartReferenceLine(label, value, showWhen, color, style)","label: Text to display on top of the reference line. value: The numeric value at which the reference line will be drawn. showWhen: Determines whether the reference line is displayed on the interface. When set to false, the reference line is hidden and is not evaluated. Default: true. color: Color for the reference line. Valid values: Any valid hex color or ""ACCENT"", ""BLUEGRAY"", ""GREEN"", ""GOLD"", ""ORANGE"", ""PURPLE"", ""RED"",""SKYBLUE"", ""LIMEGREEN"", ""YELLOW"", ""AMBER"", ""PINK"", and ""VIOLETRED"". style: Style of the reference line. Valid values are: ""SOLID"", ""DOT"", ""DASH"" (default), ""DASHDOT"", ""SHORTDASH"". "
a!chartSeries(),"a!chartSeries(label, data, links, color, showWhen)","label: Name that corresponds to the data value or data values to display in the legend. data: Value displayed for the related series.label. links: Array of values that determine what occurs when a user clicks a data point in the chart. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() color: Overrides the auto-assignment of series color with a specific value. Valid values: Any valid hex color or ""ACCENT"", ""BLUEGRAY"", ""GREEN"", ""GOLD"", ""ORANGE"", ""PURPLE"", ""RED"", ""SKYBLUE"", ""LIMEGREEN"", ""YELLOW"", ""AMBER"", ""PINK"", ""VIOLETRED"". showWhen: Determines whether the series is displayed on the interface. When set to false, the series is hidden and is not evaluated. Default: true. "
a!checkboxFieldByIndex(),"a!checkboxFieldByIndex(label, instructions, required, disabled, choiceLabels, value, validations, saveInto, validationGroup, requiredMessage, align, labelPosition, helpTooltip, choiceLayout, accessibilityText, showWhen, choiceStyle)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. choiceLabels: Array of options for the user to select. value: Indices of choices to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice indexes when the user changes the selections. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of choice labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". choiceLayout: Determines the layout. Valid values include ""STACKED"" (default) to display the choices one on top of another and ""COMPACT"" to display the choices side-by-side. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. choiceStyle: Determines how the choices should be displayed on the interface. Valid values: ""STANDARD"" (default), ""CARDS"". "
a!checkboxField(),"a!checkboxField(label, instructions, required, disabled, choiceLabels, choiceValues, value, validations, saveInto, validationGroup, requiredMessage, align, labelPosition, helpTooltip, choiceLayout, accessibilityText, showWhen, choiceStyle)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. choiceLabels: Array of options for the user to select. choiceValues: Array of values associated with the available choices. value: Values of choices to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice values when the user changes the selections. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of choice labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". choiceLayout: Determines the layout. Valid values: ""STACKED"" (default), ""COMPACT"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. choiceStyle: Determines how the choices should be displayed on the interface. Valid values: ""STANDARD"" (default), ""CARDS"". "
a!columnChartField(),"a!columnChartField(label, instructions, categories, series, xAxisTitle, yAxisTitle, yAxisMin, yAxisMax, stacking, referenceLines, showLegend, showDataLabels, showTooltips, allowDecimalAxisLabels, labelPosition, helpTooltip, accessibilityText, showWhen, colorScheme, height, xAxisStyle, yAxisStyle, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text to display on the X-Axis next to each column. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (horizontal) axis. yAxisTitle: Title for the dependent (vertical) axis. yAxisMin: Determines the minimum displayed point on the vertical axis. yAxisMax: Determines the maximum displayed point on the vertical axis. stacking: Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: ""NONE"" (default), ""NORMAL"", ""PERCENT_TO_TOTAL"". referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed on each column. Default: false. showTooltips: Determines if a tooltip displays the data value for a column. Default: true. allowDecimalAxisLabels: Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"" (default), ""TALL"". See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!columnChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!columnChartConfig(),"a!columnChartConfig(primaryGrouping, secondaryGrouping, measures, sort, dataLimit, link, showIntervalsWithNoData)","primaryGrouping: Defines the field labels to display on the axis in the chart, configured using a!grouping(). secondaryGrouping: Defines the field labels to display in the stacking or grouped bars in the chart, configured using a!grouping(). measures: Defines the numerical calculations for data in the chart, configured using a!measure(). If no measure is provided, a count of records shows as the measurement in the chart. sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using a!dynamicLink(). showIntervalsWithNoData: Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: false. "
a!columnLayout(),"a!columnLayout(contents, width, showWhen)","contents: Values that define the interface components for a column. width: Determines the width of the column. Valid values: ""AUTO"" (default), ""EXTRA_NARROW"", ""NARROW"", ""NARROW_PLUS"", ""MEDIUM"", ""MEDIUM_PLUS"", ""WIDE"", ""WIDE_PLUS"", ""1X"", ""2X"", ""3X"", ""4X"", ""5X"", ""6X"", ""7X"", ""8X"", ""9X"", ""10X"". showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. "
a!hierarchyBrowserFieldColumns(),"a!hierarchyBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, firstColumnValues, nodeConfigs, pathValue, pathSaveInto, nextColumnValues, selectionValue, selectionSaveInto, height, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". firstColumnValues: Values in the first column. For example, a!queryEntity(…).data or rule!CRM_getAllCustomers(). nodeConfigs: Describe how to display a value as a node using a!hierarchyBrowserFieldColumnsNode() and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue is any node value. pathValue: As the user clicks through the browser, clicked nodes become highlighted. These clicked nodes' values are in the pathValue. They should be stored in a variable, for example local!path. The clicked node's value is used to determine the next column, generated by nextColumnValues. pathSaveInto: Variable or list of variables to update when a user clicks on a drillable or selectable node, as determined by the node configurations. For example, local!path. Use a!save() to save a modified or alternative value to a variable. nextColumnValues: Given a node value, describe how to get the next column’s values using the variable fv!nodeValue. For example, rule!CRM_getTicketsForCustomer(customer: fv!nodeValue, isActive: true). This rule or expression is evaluated for each value in pathValue where fv!nodeValue refers any value in pathValue. selectionValue: Value of the currently selected node. The selection will be indicated by a unique display if present in the navigation path. selectionSaveInto: Variable or list of variables to update when a user clicks on a selectable node, as determined by the node configurations. Use a!save() to save a modified or alternative value to a variable. height: Determines the height of the component.Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!hierarchyBrowserFieldColumnsNode(),"a!hierarchyBrowserFieldColumnsNode(id, label, image, link, isSelectable, isDrillable, nextColumnCount, showWhen)","id: Required unique identifier of the node. This value only needs to be unique within the nodes column. label: Required text to display in the node. image: Required image to display in the node, created with: a!documentImage() a!userImage() a!webImage() link: Optional link to display in the node s label title. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() isSelectable: If true, clicking the node will save the columns browser's selection value and navigation path. If false, clicking the node will not save the selection value. It may still save the navigation path if the node is drillable. On hover, a selectable node will have a unique display. (default: true) isDrillable: If true, clicking the node will save the columns browser's navigation path, revealing another column to the user. If false, clicking the node will not reveal another column. It may still save the navigation path if the node is selectable. On hover, a drillable node will have a unique display. (default: true) nextColumnCount: The number of nodes that would be displayed if the user drilled into this node. This value is optional and is displayed on mobile only. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!columnsLayout(),"a!columnsLayout(columns, alignVertical, showWhen, marginBelow, stackWhen, showDividers, spacing, marginAbove)","columns: Columns to display using a column layout, a!columnLayout(). alignVertical: Determines vertical alignment of all column content with the layout. Valid values are ""TOP"" (default), ""MIDDLE"", and ""BOTTOM"". showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". stackWhen: Determines the window width at which column layouts stack vertically. List all widths where columns should stack. Valid Values: ""PHONE"" (default), ""TABLET_PORTRAIT"", ""TABLET_LANDSCAPE"",""DESKTOP"", ""DESKTOP_WIDE"", ""NEVER"". showDividers: Determines whether dividers appear between the columns. Default: false. spacing: Determines the space between columns in the layout when they are not stacked. Valid values: “STANDARD” (default), “NONE”, “DENSE”, “SPARSE”. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". "
a!pickerFieldCustom(),"a!pickerFieldCustom(label, instructions, required, readOnly, disabled, maxSelections, suggestFunction, selectedLabels, selectedTooltips, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, placeholder, helpTooltip, selectedLinks, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. suggestFunction: A reference to a rule or function that populates the suggestion pane. The rule or function must take a single Text parameter and must return a DataSubset, created via a!dataSubset() or a plugin function, where ""data"" contains the labels to display and ""identifiers"" contains the values to save. selectedLabels: Array of text display labels for the currently selected items. selectedTooltips: Array of text tooltips for the currently selected items. value: Array of selected identifiers. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the array of selected identifiers when the user adds or removes an item. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". selectedLinks: Array of links to apply to the selected tokens. Create links with a!authorizationLink(), a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), or a!userRecordLink(). accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!dateField(),"a!dateField(label, instructions, required, readOnly, disabled, value, validations, saveInto, validationGroup, requiredMessage, align, labelPosition, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Date to display in the field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the date when the user changes it. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of the date value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!dateTimeField(),"a!dateTimeField(label, instructions, required, readOnly, disabled, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Date and time to display in the field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the date and time when the user changes it. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!documentBrowserFieldColumns(),"a!documentBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootFolder, navigationValue, navigationSaveInto, selectionValue, selectionSaveInto, showWhen, readOnly, height, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootFolder: The contents of the specified folder or knowledge center are displayed in the first column of the browser. navigationValue: The folder that has been navigated to whose contents are displayed in the rightmost column. navigationSaveInto: Variable or list of variables to update when the navigation folder changes. selectionValue: The document to show as selected. selectionSaveInto: Variable or list of variables to update when a document is clicked. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. readOnly: Determines whether selection is enabled. Default: false. height: Determines the height of the component. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!documentImage(),"a!documentImage(document, altText, caption, link, showWhen)","document: The image to display. altText: Alternate text of the image used for the image's alt attribute and read by screen readers; see accessibility considerations for more information. caption: Optional text to display in the mouseover text for the image and when the images is viewed in slideshow mode. link: Link that determines the behavior of an image when clicked. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() showWhen: Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true. "
a!documentDownloadLink(),"a!documentDownloadLink(label, document, showWhen)","label: Text displayed as the link name the user clicks on. document: The ID of the document that downloads when the user clicks the link. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!pickerFieldDocuments(),"a!pickerFieldDocuments(label, labelPosition, instructions, required, requiredMessage, readOnly, disabled, maxSelections, folderFilter, value, validations, validationGroup, saveInto, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. folderFilter: When present, only documents that are inside this folder and its sub-folders are suggested. value: Array of currently selected documents. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. saveInto: One or more variables that are updated with the array of selected documents when the user selects or removes a document. Use a!save() to save a modified or alternative value to a variable. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!documentViewerField(),"a!documentViewerField(label, labelPosition, instructions, helpTooltip, document, showWhen, height, altText, disabled, accessibilityText, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""COLLAPSED"", ""JUSTIFIED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". document: The document to display. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. height: Determines the field height. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". altText: Equivalent alternate text provided to assistive technology. disabled: Determines if the user is prevented from interacting with the document. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!documentAndFolderBrowserFieldColumns(),"a!documentAndFolderBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootFolder, navigationValue, navigationSaveInto, selectionValue, selectionSaveInto, showWhen, readOnly, height, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"",""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootFolder: The contents of the specified folder or knowledge center are displayed in the first column of the browser. navigationValue: The folder that has been navigated to whose contents are displayed in the rightmost column. navigationSaveInto: Variable or list of variables to update when the navigation folder changes. selectionValue: The document or folder to show as selected. selectionSaveInto: Variable or list of variables to update when a document or folder is clicked. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. readOnly: Determines whether selection is enabled. Default: false. height: Determines the height of the component. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!pickerFieldDocumentsAndFolders(),"a!pickerFieldDocumentsAndFolders(label, labelPosition, instructions, required, requiredMessage, readOnly, disabled, maxSelections, folderFilter, value, validations, validationGroup, saveInto, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. folderFilter: When present, only documents and folders that are inside this folder and its subfolders are suggested. value: Array of currently selected documents and folders. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. saveInto: One or more variables that are updated with the array of selected documents and folders when the user selects or removes a document or folder. Use a!save() to save a modified or alternative value to a variable. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!dropdownFieldByIndex(),"a!dropdownFieldByIndex(label, labelPosition, instructions, required, disabled, choiceLabels, placeholder, value, validations, saveInto, validationGroup, requiredMessage, helpTooltip, accessibilityText, showWhen, searchDisplay)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false.' disabled: Determines if the field should display as potentially editable but grayed out. Default: false.' choiceLabels: Array of options for the user to select. placeholder: Text to display when nothing is selected and the value is null. value: Index of the choice to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice index when the user changes the selection. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. searchDisplay: Determines when a search box displays above the options. Valid values: ""AUTO"" (default), ""ON"", ""OFF"". When set to ""AUTO"", the search box displays if there are more than 11 options. "
a!dropdownField(),"a!dropdownField(label, labelPosition, instructions, required, disabled, choiceLabels, choiceValues, placeholder, value, validations, saveInto, validationGroup, requiredMessage, helpTooltip, accessibilityText, showWhen, searchDisplay)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. choiceLabels: Array of options for the user to select. choiceValues: Array of values associated with the available choices. placeholder: Text to display when nothing is selected and the value is null. value: Value of the choice to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice value when the user changes the selection. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. searchDisplay: Determines when a search box displays above the options. Valid values: ""AUTO"" (default), ""ON"", ""OFF"". When set to ""AUTO"", the search box displays if there are more than 11 options. "
a!dynamicLink(),"a!dynamicLink(label, value, saveInto, showWhen)","label: Text displayed as the link name the user clicks on. value: The value that is saved when the user clicks the link. saveInto: One or more variables that are updated with the link's value when the user clicks it. Use a!save(target, value) to save a modified or alternative value to a variable. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!gridLayout(),"a!gridLayout(label, instructions, headerCells, columnConfigs, rows, validations, validationGroup, selectable, selectionDisabled, selectionRequired, selectionValue, selectionSaveInto, addRowLink, totalCount, emptyGridMessage, helpTooltip, labelPosition, showWhen, shadeAlternateRows, spacing, height, borderStyle, selectionStyle, rowHeader, accessibilityText)","label: Text to display as the grid label. instructions: Supplemental text about this grid. headerCells: Array of column headers created with a!gridLayoutHeaderCell(). columnConfigs: Array of column configurations created with a!gridLayoutColumnConfig(). rows: Array of grid rows created with a!gridRowLayout(). validations: Validation errors to display below the grid. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.' selectable: Determines if the selection column is displayed. Default: false. selectionDisabled: Determines if selection is disabled on all rows. Default: false. selectionRequired: Determines if a selection is required to submit the form. Default: false. selectionValue: Identifiers of selected rows. selectionSaveInto: One or more variables that are updated with the selected identifiers when the user changes selections. Use a!save() to save a modified or alternative value to a variable. addRowLink: Link for adding a row to the grid. Create link using a!dynamicLink(). totalCount: Number of rows of data displayed in the grid. emptyGridMessage: Text to display in the grid when no data is available. Default is ""No items available"". helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. shadeAlternateRows: Determines whether alternate rows are shaded. Default: true. spacing: Determines the spacing within grid cells. Valid values: ""STANDARD"" (web default), ""DENSE"" (mobile default). height: Determines the height of the grid. Valid values: ""SHORT"", ""SHORT_PLUS"", ""MEDIUM"", ""MEDIUM_PLUS"", ""TALL"", ""TALL_PLUS"", ""EXTRA_TALL"", ""AUTO"" (default). All grid heights besides AUTO have fixed headers that will remain at the top of the grid when scrolling. borderStyle: Determines the style of the grid border. Valid values: ""STANDARD"" (default), ""LIGHT"". selectionStyle: Determines the style when a row is selected. Valid values: ""CHECKBOX"" (default), ""ROW_HIGHLIGHT"". rowHeader: Index of the column to be used as the row header. Screen readers will announce the value in each row header when navigating to other cells within that row. Used only for accessibility; produces no visible change. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!encryptedTextField(),"a!encryptedTextField(label, instructions, required, readOnly, disabled, value, saveInto, refreshAfter, validationGroup, requiredMessage, align, labelPosition, placeholder, helpTooltip, masked, accessibilityText, showWhen, inputPurpose)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Text to display in the text field. saveInto: One or more variables that are updated with the encrypted text when the user changes the field. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of text value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". masked: Determines if the value is obscured from view. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. inputPurpose: Indicates the intent of input for accessibility improvements, like autocomplete, used by browsers and assistive technologies. Valid values are ""NAME"", ""EMAIL"", ""PHONE_NUMBER"", ""STREET_ADDRESS"", ""POSTAL_CODE"", ""CREDIT_CARD_NUMBER"", and ""OFF"". "
a!fileUploadField(),"a!fileUploadField(label, labelPosition, instructions, helpTooltip, target, fileNames, fileDescriptions, maxSelections, value, saveInto, required, requiredMessage, disabled, validations, validationGroup, buttonStyle, buttonSize, accessibilityText, showWhen, uploadMethods, buttonDisplay, placeholder, showVirusScanMessage)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". target: Determines the eventual location of the uploaded files. fileNames: Determines the names for the files. When not provided, the uploaded filenames are used. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index. fileDescriptions: Determines the descriptions for the files. When not provided, the descriptions of the new files are empty. Access name, size, and extension of each file using the variables fv!file.name, fv!file.size, and fv!file.extension. Access the index of each file using the variable fv!index. maxSelections: Maximum number of allowed files. Once this number is reached, further uploads are blocked until a file is removed. value: The files associated with this field. saveInto: One or more variables that are updated with the files when the user uploads files. Removing all uploaded files saves a null document. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the field should display as potentially editable but grayed out. When files are present in this state, they may not be deleted. Default: false. validations: Validation errors to display below the field when the value is not null. Access the names, sizes, and extensions of the uploaded files using the variables fv!files.name, fv!files.size, and fv!files.extension. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. buttonStyle: Determines the style of the upload button. Valid values: ""NORMAL"" Displays the label and border in the accent color. ""PRIMARY"" Displays the label in white on an accent color background. ""SECONDARY"" (default) Displays the label and border in gray. ""LINK"" Displays the label in the accent color and has no border until focused. buttonSize: Determines the size of the upload button. Valid values: ""SMALL"" (default), ""STANDARD"", ""LARGE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. uploadMethods: (Mobile only) Determines which mobile upload methods are displayed to users. If one method is specified, the upload button will be customized. Multiple may be applied. If value is null, all methods are provided. Valid values include: null (Default),“SIGNATURE”, “CAMERA”, “CHOOSE_PHOTO”, “CHOOSE_FILE”. buttonDisplay: Determines if the file upload will display a button with a label or an icon. Valid values: ""LABEL"", ""ICON"", and ""LABEL_AND_ICON"". Default behavior displays ""LABEL"" on web and ""LABEL_AND_ICON"" on mobile. placeholder: Text to display when no file is uploaded. Default: ""Drop files here"". showVirusScanMessage: Determines whether the ""Scanning for viruses"" message appears during file upload. When set to false, the message is hidden, but the file is still scanned for viruses. An error message will still appear if real-time virus scanning is enabled and the uploaded file contains a virus. Default: true. "
a!floatingPointField(),"a!floatingPointField(label, instructions, required, readOnly, disabled, value, validations, saveInto, validationGroup, requiredMessage, align, labelPosition, refreshAfter, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Number to display in the field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the number when the user changes it. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of the number value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!folderBrowserFieldColumns(),"a!folderBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootFolder, navigationValue, navigationSaveInto, selectionValue, selectionSaveInto, readOnly, showWhen, height, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"",""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootFolder: The contents of the specified folder or knowledge center are displayed in the first column of the browser. navigationValue: The folder that has been navigated to whose contents are displayed in the rightmost column. navigationSaveInto: Variable or list of variables to update when the navigation folder changes. selectionValue: The folder to show as selected. selectionSaveInto: Variable or list of variables to update when a folder is clicked. readOnly: Determines whether selection is enabled. Default: false. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. height: Determines the height of the component. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!pickerFieldFolders(),"a!pickerFieldFolders(label, labelPosition, instructions, required, requiredMessage, readOnly, disabled, maxSelections, folderFilter, value, validations, validationGroup, saveInto, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. folderFilter: When present, only folders that are inside this folder and its subfolders are suggested. value: Array of currently selected folders. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. saveInto: One or more variables that are updated with the array of selected folders when the user selects or removes a folder. Use a!save() to save a modified or alternative value to a variable. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!formLayout(),"a!formLayout(label, instructions, contents, buttons, validations, validationGroup, skipAutoFocus, showWhen)","label: Optional text to display as the interface's title. instructions: Optional text displayed below the field's label. contents: Components and layouts to display in the form body. buttons: Buttons to display at the bottom of the form, arranged using a!buttonLayout(). validations: Validation errors displayed above the form buttons. Configured using a text array or an array with a mix of text and Validation Message using a!validationMessage(message, validateAfter). validationGroup: When present, the form is only validated when a button in the same validation group is clicked. skipAutoFocus: Determines whether the first input will receive focus when a form loads. Default is false. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. "
a!gaugeField(),"a!gaugeField(label, labelPosition, instructions, helpTooltip, percentage, primaryText, secondaryText, color, size, align, accessibilityText, showWhen, tooltip, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". percentage: Number to display between 0 and 100. primaryText: Optional text to display on the first line inside the gauge. Create using plain text, a!gaugeIcon(), a!gaugePercentage(), or a!gaugeFraction(). secondaryText: Optional text to display on the second line inside the gauge. color: Determines the color. Access the percentage using fv!percentage. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""NEGATIVE"", ""WARN"". size: Determines the size of the gauge. Valid values: SMALL, MEDIUM (default), LARGE. align: Determines alignment of the gauge. Valid values: START, CENTER (default), END. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. tooltip: Text to display as a tooltip on the gauge. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!gaugeFraction(),a!gaugeFraction(denominator),denominator: Value to display as the bottom portion of the fraction. Value cannot be negative. Default: 100. Numerator is calculated automatically based on denominator and fill percentage. 
a!gaugeIcon(),"a!gaugeIcon(icon, altText, color)","icon: Icon to display. See the list of available icons. altText: Equivalent alternate text to display in the hover tooltip and for use by screen readers. color: Determines the icon color. Access the percentage using fv!percentage. Valid values: Any valid hex color or ""ACCENT"", ""POSITIVE"", ""NEGATIVE"". Defaults to the gauge field color. "
a!gaugePercentage(),"a!gaugePercentage(label, labelPosition, instructions, helpTooltip, percentage, primaryText, secondaryText, color, size, align, accessibilityText, showWhen, tooltip)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: “ABOVE” (default), “ADJACENT”, “JUSTIFIED”, “COLLAPSED”. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is “COLLAPSED”. percentage: Number to display between 0 and 100. primaryText: Content to display on the first line inside the gauge. Create using plain text, a!gaugeIcon(), a!gaugePercentage(), or a!gaugeFraction(). secondaryText: Optional text to display on the second line inside the gauge. color: Determines the color. Access the percentage using fv!percentage. Valid values: Any valid hex color or “ACCENT” (default), “POSITIVE”, “NEGATIVE”, “WARN”. size: Determines the size of the gauge. Valid values: “SMALL”, “MEDIUM” (default), “LARGE”. align: Determines alignment of the gauge. Valid values: “START”, “CENTER” (default), “END”. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. tooltip: Text to display as a tooltip on the gauge. "
a!gridColumn(),"a!gridColumn(label, sortField, helpTooltip, value, showWhen, align, width)","label: Text to display as the column header. sortField: The field used to sort the grid when selecting this column header. Grids that use record data must use the recordType! domain to reference a record field or related record field. For example, recordType!Case.fields.caseName. helpTooltip: Displays a help icon in the column header with the specified text as a tooltip. value: The value to display in each cell within the column. The value can be text, a!imageField(), a!linkField(), a!richTextDisplayField(), a!tagField(), a!buttonArrayLayout(), a!recordActionField(), or a!progressBarField(). It is evaluated once for each row. Reference fields from the source using dot notation, such as fv!row.status, or the identifier using fv!identifier. Grids that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!row[recordType!Case.fields.caseName]. showWhen: Determines whether the column is displayed in the grid. When set to false, the column is hidden and is not evaluated. Default: true. align: Determines the alignment for the header label and all values within the column. Valid values: ""START"" (default), ""CENTER"", ""END"". width: Determines the column width. Valid values: ""AUTO"", ""ICON"", ""ICON_PLUS"", ""NARROW"", ""NARROW_PLUS"", ""MEDIUM"", ""MEDIUM_PLUS"", ""WIDE"", ""1X"", ""2X"", ""3X"", ""4X"", ""5X"", ""6X"", ""7X"", ""8X"", ""9X"", and ""10X"". "
a!gridLayoutColumnConfig(),"a!gridLayoutColumnConfig(width, weight, showWhen)","width: Determines the column width. Valid values: ""DISTRIBUTE"" (default), ""NARROW"", ""ICON"". weight: Determines how wide distributed columns are in relation to each other. Valid values: integers from 1 (default) to 10. showWhen: Determines whether the column configuration is displayed in the grid. When set to false, the column configuration is hidden and is not evaluated. Default: true. "
a!gridLayoutHeaderCell(),"a!gridLayoutHeaderCell(label, helpTooltip, align, showWhen)","label: Text to display as the column header. helpTooltip: Displays a help icon with the specified text as a tooltip. align: Determines the header label's alignment. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". showWhen: Determines whether the header cell is displayed in the grid. When set to false, the header cell is hidden and is not evaluated. Default: true. "
a!gridRowLayout(),"a!gridRowLayout(contents, id, selectionDisabled, showWhen)","contents: Array of components to display in the grid cell. Supported components: Barcode, Checkboxes, Date, Date & Time, Dropdown, Decimal, Encrypted Text, File Upload, Image, Integer, Link, Multiple Dropdown, Paragraph, Pickers, Progress Bar, Radio Buttons, Rich Text, and Text. id: Value that uniquely identifies this row for selection. selectionDisabled: When selection is enabled, determines if the selection checkbox is disabled for this row. Default: false. showWhen: Determines whether the row is displayed in the grid. When set to false, the row is hidden and is not evaluated. Default: true. "
a!groupBrowserFieldColumns(),"a!groupBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootGroup, pathValue, pathSaveInto, selectionValue, selectionSaveInto, readOnly, height, hideUsers, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootGroup: The direct members of the initial group are displayed in the first column. pathValue: The path from the first column to the current navigation. pathSaveInto: Variable or list of variables to update when a user clicks on a group. selectionValue: This group is displayed as selected when it is present in the navigation path array. selectionSaveInto: Variable or list of variables to update upon selection of a group. readOnly: Determines whether selection is enabled. Default: false. height: Determines the height of the component. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". hideUsers: Determines whether users will be displayed. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!pickerFieldGroups(),"a!pickerFieldGroups(label, instructions, required, readOnly, disabled, maxSelections, groupFilter, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. groupFilter: When present, only groups which are members of this group are suggested. value: Array of currently selected groups. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the array of selected groups when the user selects or removes a group. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!headerContentLayout(),"a!headerContentLayout(header, contents, showWhen, backgroundColor, contentsPadding, isHeaderFixed)","header: Billboard, card, or list of billboards or cards to display at the top of the page. Configure using a!billboardLayout() or a!cardLayout(). contents: Components and layouts to display in the body of the interface. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. backgroundColor: Color to show behind the contents of the page. Valid values: Any valid hex color or ""WHITE"" (default), ""TRANSPARENT"", ""CHARCOAL_SCHEME"", ""NAVY_SCHEME"", ""PLUM_SCHEME"". contentsPadding: Determines the space surrounding the contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". isHeaderFixed: Determines whether the header remains at the top of the page when scrolling. Default: false. "
a!richTextHeader(),"a!richTextHeader(text, size, link, linkStyle, showWhen)","text: Array of text to display as a rich text item. size: Determines the text size. Valid values: ""ICON"" (default), ""TINY"", ""GALLERY"", ""SMALL"", ""MEDIUM"", and ""LARGE"". link: Link to apply to the text. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() linkStyle: Determines how the link is underlined. Valid values: ""INLINE"" (default), ""STANDALONE"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!imageField(),"a!imageField(label, labelPosition, instructions, helpTooltip, images, showWhen, size, isThumbnail, style, align, accessibilityText, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". images: Array of images to display, created with a!webImage(), a!userImage(), or a!documentImage(). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. size: Determines how the images are sized. Valid values: ""ICON"", ""GALLERY"", ""TINY"", ""SMALL"", ""MEDIUM"" (default), ""LARGE"", ""FIT"". See the documentation for guidance on how to use different image sizes effectively. isThumbnail: Determines whether the images can be viewed at a larger size when clicked. Multiple images will be visible in a slideshow. Default: false. style: Determines how the images are rendered. Valid values: ""STANDARD"" (default), ""AVATAR"". align: Determines alignment of the image(s). Valid values: ""START"", ""CENTER"", ""END"". Image fields in grids are center-aligned by default. Image fields outside of grids are start-aligned by default. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!richTextImage(),"a!richTextImage(image, showWhen)","image: Required image to display in the node, created with a!documentImage(),a!userImage(), and a!webImage(). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!integerField(),"a!integerField(label, instructions, required, readOnly, disabled, value, validations, saveInto, validationGroup, requiredMessage, align, labelPosition, refreshAfter, placeholder, helpTooltip, masked, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Number to display in the field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the integer when the user changes it. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of number value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". masked: Determines if the value is obscured from view. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!lineChartField(),"a!lineChartField(label, instructions, categories, series, xAxisTitle, yAxisTitle, yAxisMin, yAxisMax, referenceLines, showLegend, showDataLabels, showTooltips, allowDecimalAxisLabels, labelPosition, helpTooltip, showWhen, connectNulls, accessibilityText, colorScheme, height, xAxisStyle, yAxisStyle, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. categories: Text, Date, or Date and Time array to display on the x-axis below each data point. If you are using an array of Date or Date and Time, make sure the data is sorted prior to using it as a category. series: Array of data series created with a!chartSeries(). xAxisTitle: Title for the independent (horizontal) axis. yAxisTitle: Title for the dependent (vertical) axis. yAxisMin: Determines the minimum displayed point on the vertical axis. yAxisMax: Determines the maximum displayed point on the vertical axis. referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showLegend: Determines if a color legend displays below the chart. Default: true. showDataLabels: Determines if data values are displayed next to each data point. Default: false. showTooltips: Determines if a tooltip displays the data value for each data point. Default: true. allowDecimalAxisLabels: Allows dependent (vertical) values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. connectNulls: Determines whether to connect a graph line across null points, or render a gap between the two points on either side of the null. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""MICRO"", ""SHORT"", ""MEDIUM"" (default), ""TALL"". See Chart Heights for guidance on using the ""MICRO"" size. xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!lineChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!lineChartConfig(),"a!lineChartConfig(primaryGrouping, secondaryGrouping, measures, sort, dataLimit, link, showIntervalsWithNoData)","primaryGrouping: Defines the field labels to display on the axis in the chart, configured using a!grouping(). secondaryGrouping: Defines the field labels to display across each line in the chart, configured using a!grouping(). measures: Defines the numerical calculations for data in the chart, configured using a!measure(). If no measure is provided, a count of records shows as the measurement in the chart. sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using a!dynamicLink(). showIntervalsWithNoData: Determines whether the axis in the chart displays date or time values that do not have a value associated with them. For example, show January, February, and March, even if February has no data. This parameter is only available when a Date, Time, or Date and Time field is used as the primary grouping. Default: false. "
a!linkField(),"a!linkField(label, instructions, links, labelPosition, align, helpTooltip, showWhen, accessibilityText)","label: Text to display as the field label. instructions: Supplemental text about this field. links: Array of links to display. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. align: Determines alignment of link labels. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!richTextListItem(),"a!richTextListItem(text, nestedList, showWhen)","text: Array of text to display as a rich text list item. Text can be formatted using a!richTextItem(). nestedList: A bulleted or numbered list to nest within the rich text list item. Use a!richTextBulletedList() or a!richTextNumberedList(). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!milestoneField(),"a!milestoneField(label, instructions, steps, links, active, labelPosition, helpTooltip, showWhen, orientation, accessibilityText, color, marginAbove, marginBelow)","label: Text to display as the field label. instructions: Supplemental text about this field. steps: Array of labels describing the sequence of steps. links: Array of links to apply to the steps. Create links with a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), a!userRecordLink(), or a!authorizationLink(). active: Index of the current step. When null, all steps are in the future. When -1, all steps are completed. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. orientation: Determines the layout of the milestone steps. Valid values: ""HORIZONTAL"" (default), ""VERTICAL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. color: Determines the fill color. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""NEGATIVE"", ""WARN"". marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!multipleDropdownFieldByIndex(),"a!multipleDropdownFieldByIndex(label, labelPosition, instructions, required, disabled, placeholder, choiceLabels, value, validations, saveInto, validationGroup, requiredMessage, helpTooltip, accessibilityText, showWhen, searchDisplay)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. placeholder: Text to display in the field when it is empty. choiceLabels: Array of options for the user to select. value: Indices of choices to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice indexes when the user changes the selections. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. searchDisplay: Determines when a search box displays above the options. Valid values: ""AUTO"" (default), ""ON"", ""OFF"". When set to ""AUTO"", the search box displays if there are more than 11 options. "
a!multipleDropdownField(),"a!multipleDropdownField(label, instructions, required, disabled, placeholder, choiceLabels, choiceValues, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, helpTooltip, accessibilityText, showWhen, searchDisplay)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. placeholder: Text to display in the field when it is empty. choiceLabels: Array of options for the user to select. choiceValues: Array of values associated with the available choices. value: Values of choices to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice values when the user changes the selections. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. searchDisplay: Determines when a search box displays above the options. Valid values: ""AUTO"" (default), ""ON"", ""OFF"". When set to ""AUTO"", the search box displays if there are more than 11 options. "
a!newsEntryLink(),"a!newsEntryLink(label, entry, showWhen)","label: Text associated with this link. entry: The ID of the linked feed entry. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!richTextNumberedList(),"a!richTextNumberedList(items, showWhen)","items: Array of text to display as a numbered list. Text can be further formatted using a!richTextItem(). Nested lists can be created using a!richTextListItem(). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!orgChartField(),"a!orgChartField(label, labelPosition, instructions, value, saveInto, showAllAncestors, helpTooltip, accessibilityText, showWhen, showTotalCounts)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. value: The user who is the focus of the org chart. saveInto: One or more variables that are updated with the user value. Use a!save() to save a modified or alternative value to a variable. showAllAncestors: Determines if all ancestors above the user are displayed. Default is false, which displays only the user's supervisor. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. showTotalCounts: Determines who is included in the report count. When set to true, the count includes both direct and indirect reports. When set to false, the count only includes direct reports. Default: false. "
a!gridField(),"a!gridField(label, labelPosition, instructions, helpTooltip, emptyGridMessage, data, columns, pageSize, initialSorts, secondarySorts, pagingSaveInto, selectable, selectionStyle, selectionValue, selectionSaveInto, selectionRequired, selectionRequiredMessage, disableRowSelectionWhen, validations, validationGroup, showWhen, spacing, height, borderStyle, shadeAlternateRows, rowHeader, accessibilityText, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange, userFilters, showSearchBox, showRefreshButton, showExportButton, recordActions, openActionsIn, actionsDisplay, actionsStyle)","label: Text to display as the grid label. labelPosition: Determines where the label appears. Valid values: ABOVE (default) Displays the label above the component. ADJACENT Displays the label to the left of the component. COLLAPSED Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. JUSTIFIED Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this grid. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". emptyGridMessage: Text to display in the grid when no data is available. Default is ""No items available"". data: The data to display in the grid. Use a record type reference or a!recordData() to source your data from records and utilize records functionality, such as user filters and export. For other cases, you can use a query, such as a!queryEntity() with pagingInfo set as fv!pagingInfo to have the grid automatically manage paging. The function a!queryProcessAnalytics(), a Data Subset, a list of Dictionary, or an array of data can also be used. When using a query that returns a datasubset, you must pass the total count (fetchTotalCount: true on the query). columns: The columns to display in the grid, configured using a!gridColumn(). pageSize: The maximum number of rows to display at a time. Default: 10 initialSorts: Sorts applied to the grid upon initial load only. Each sort is applied in the order listed. The first sort in the list will display an active-sort arrow indicator (either up or down for ascending or descending) in its corresponding grid column (if applicable). secondarySorts: Sorts applied to the grid after every user interaction. If the user activates a sort on a column, these sorts will be applied to the other columns in the order they're listed. For example, adding a secondary sort on Month will keep them in order when the user sorts on Year. Secondary sorts do not display an active-sort indicator. pagingSaveInto: One or more variables that are updated only when user invokes a paging action on the grid. You can reference the current paging of the grid using fv!pagingInfo. selectable: Determines if grid rows are selectable. When selection style is ""CHECKBOX"" (default), the selection column is displayed. Default: false. selectionStyle: Determines the style when a row is selected. Valid values: ""CHECKBOX"" (default), ""ROW_HIGHLIGHT"". selectionValue: Identifiers of the rows that should appear as selected. Can be set to have rows be pre-selected for the user. Supported types: Text Array and Integer Array. selectionSaveInto: One or more variables that are updated with the selected identifiers when the user changes selections. Use a!save() to save a modified or alternative value to a variable. You can reference the rows selected and deselected in the most recent user interaction (not all selected or deselected rows) using fv!selectedRows and fv!deselectedRows respectively. selectionRequired: Determines if a selection is required to submit the form. Default: false. selectionRequiredMessage: Custom message to display when a selection is required and not provided. disableRowSelectionWhen: Determines for each row if selection is disabled. The condition defined in this parameter is evaluated once for each row. Reference fields from the source using dot notation, such as fv!row.status, or the identifier of the row using fv!identifier. Grids that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!row[recordType!Case.fields.caseName]. Default: false. validations: Validation errors to display below the grid when the data is invalid, configured using a!validationMessage(). You can reference the current page of data using fv!currentPage. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. spacing: Determines the spacing within grid cells. Valid values: ""STANDARD"" (web default), ""DENSE"" (mobile default). height: Determines height of the grid. Valid values: ""SHORT"", ""SHORT_PLUS"", ""MEDIUM"", ""MEDIUM_PLUS"", ""TALL"", ""TALL_PLUS"", ""EXTRA_TALL"",""AUTO"" (default). All grid heights besides AUTO have fixed headers that will remain at the top of the grid when scrolling. borderStyle: Determines the style of the grid border. Valid values: ""STANDARD"" (default), ""LIGHT"". shadeAlternateRows: Determines whether alternate rows are shaded. Default: true. rowHeader: Index of the column to be used as the row header. Screen readers will announce the value in each row header when navigating to other cells within that row. Used only for accessibility; produces no visible change. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. refreshAlways: When true, grid data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes grid data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often grid data gets refreshed in minutes. When null, grid data will not be refreshed on an interval. Valid values: ""0.5"", ""1, 2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, grid data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh grid data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes grid data each time any of these specific variables change. This allows you to refresh the grid data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). userFilters: List of user filter references to display, configured using the recordType! domain. For example, recordType!Case.filters.status. You may only reference user filters defined on the source record type used for the grid data. This parameter only applies when a record type is used as the source in the data parameter. showSearchBox: Determines if the record search box should be shown. This parameter only applies when a record type is used as the source in the data parameter. Default: true. showRefreshButton: Determines if the grid should include a refresh button to manually refresh data. This parameter only applies when a record type is used as the source in the data parameter. Default: true. showExportButton: Determines if grid data can be exported. This parameter only applies when a record type is used as the source in the data parameter. Default: false. recordActions: List of record action items to display above the grid, configured using a!recordActionItem(). If you use fv!identifier in the identifier parameter of a!recordActionItem(), you will also need to configure selection for the grid. This parameter only applies when a record type is used as the source in the data parameter. openActionsIn: Determines how record actions should open to the user. Valid values: ""DIALOG"" (default), ""NEW_TAB"", ""SAME_TAB"". actionsDisplay: Determines which details are shown for record actions, regardless of style. Valid values: ""LABEL_AND_ICON"" (default), ""LABEL"", ""ICON"". actionsStyle: Determines how the list of actions should be displayed above the grid. Valid values: ""TOOLBAR"" (default), ""TOOLBAR_PRIMARY"". Learn more. "
a!paragraphField(),"a!paragraphField(label, instructions, required, readOnly, disabled, value, validations, saveInto, refreshAfter, labelPosition, validationGroup, requiredMessage, height, placeholder, helpTooltip, showWhen, accessibilityText, characterLimit, showCharacterCount)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Text to display in the field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. height: Determines the field height. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. characterLimit: Determines the maximum number of characters. Depending on the language, some characters may count as more than one. showCharacterCount: Determines if the character count displays on the paragraph field. Only applicable if the character limit is set. Default: true. "
a!pieChartField(),"a!pieChartField(label, instructions, series, showDataLabels, showTooltips, showAsPercentage, labelPosition, helpTooltip, accessibilityText, showWhen, colorScheme, style, seriesLabelStyle, height, data, config, refreshAlways, refreshAfter, refreshInterval, refreshOnReferencedVarChange, refreshOnVarChange)","label: Text to display as the field label. instructions: Supplemental text about this field. series: Array of data series created with a!chartSeries(). showDataLabels: Determines if data values are displayed with each pie slice. Default: false. showTooltips: Determines if a tooltip displays the data value for a pie slice. Default: false. showAsPercentage: Determines if the data is shown as a percentage. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. style: Determines if the chart displays as a full pie or as a donut. Valid values: ""PIE"" (default), ""DONUT"". seriesLabelStyle: Determines where to display the series labels. Valid values: ""ON_CHART"" (default), ""LEGEND"", ""NONE"". height: Determines the chart height. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". data: Reference to the record type used for the source of this chart. Can accept a!recordData or a Record Type Reference. config: Configures how to display data on the chart, including fields used for calculations and grouping, using a!pieChartConfig(). refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). "
a!pieChartConfig(),"a!pieChartConfig(primaryGrouping, measures, sort, dataLimit, link)","primaryGrouping: Defines the field labels to display for each slice of the pie chart, configured using a!grouping(). measures: Defines the numerical calculations for data in the chart, configured using a!measure(). If no measure is provided, a count of records shows as the measurement in the chart. sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 100. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using a!dynamicLink(). "
a!processTaskLink(),"a!processTaskLink(label, task, showWhen, openLinkIn)","label: Text displayed as the link name the user clicks on. task: ID of the process task to use as the address of the link. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. openLinkIn: (Browser-Only) Determines where the linked content should open. Valid values: ""SAME_TAB"" (default), ""NEW_TAB"". "
a!progressBarField(),"a!progressBarField(label, instructions, percentage, labelPosition, helpTooltip, accessibilityText, color, showWhen, style, showPercentage, marginAbove, marginBelow)","label: Text to display as the field label. instructions: Supplemental text about this field. percentage: Number to display between 0 and 100. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. color: Determines the color. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""NEGATIVE"", ""WARN"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. style: Thickness of the progress bar. Valid values: ""THIN"" (default), ""THICK"". showPercentage: Determines whether the progress bar displays the percentage. Default: true. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!radioButtonFieldByIndex(),"a!radioButtonFieldByIndex(label, instructions, required, disabled, choiceLabels, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, choiceLayout, helpTooltip, accessibilityText, showWhen, choiceStyle)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. choiceLabels: Array of options for the user to select. value: Index of the choice to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice index when the user changes the selection. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. choiceLayout: Determines the layout. Valid values: ""STACKED"" (default), ""COMPACT"". helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. choiceStyle: Determines how the choices should be displayed on the interface. Valid values: ""STANDARD"" (default), ""CARDS"". "
a!radioButtonField(),"a!radioButtonField(label, instructions, required, disabled, choiceLabels, choiceValues, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, choiceLayout, helpTooltip, accessibilityText, showWhen, choiceStyle)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. choiceLabels: Array of options for the user to select. choiceValues: Array of values associated with the available choices. value: Value of choice to display as selected. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the choice value when the user changes the selection. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. choiceLayout: Determines the layout. Valid values: ""STACKED"" (default), ""COMPACT"". helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. choiceStyle: Determines how the choices should be displayed on the interface. Valid values: ""STANDARD"" (default), ""CARDS"". "
a!recordActionField(),"a!recordActionField(actions, style, display, openActionsIn, align, accessibilityText, showWhen)","actions: List of record action items to display, configured using a!recordActionItem(). style: Determines how the list of actions should be displayed on the interface. Valid values: ""TOOLBAR"" (default), ""LINKS"", ""CARDS"", ""SIDEBAR"", ""CALL_TO_ACTION"", ""MENU"", ""MENU_ICON"", ""TOOLBAR_PRIMARY"", ""SIDEBAR_PRIMARY"". See the record action design guidance for details on how to use different styles effectively. display: Determines how the given action labels will be displayed in each item. Valid values: ""LABEL_AND_ICON"" (default), ""LABEL"", ""ICON"". openActionsIn: Determines how actions should open to the user. Valid values: ""DIALOG"" (default), ""NEW_TAB"", ""SAME_TAB"". align: Determines alignment of the action(s). Valid values: ""START"", ""CENTER"", ""END"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!recordActionItem(),"a!recordActionItem(action, identifier)","action: A record action reference associated with a record type, configured using the recordType! domain. For example, recordType!Case.actions.editCase, will use the display name, process model, icon, context, and visibility set in the action configured in the record type. identifier: Individual record ID within the record type. Only required for related actions. - For record types that use a database as a data source, record ID is the primary key in the data store entity. - For record types that use a process as the data source, record ID is the ID for the process. - For record types that use a web service as the data source, record ID is the value returned to the ID field of the DataSubset produced by the record's source expression. "
a!recordLink(),"a!recordLink(label, recordType, identifier, dashboard, showWhen, openLinkIn)","label: Text displayed as the link name the user clicks on. recordType: The record type of the linked record view. Use the recordType! domain to reference the record type. identifier: The record ID (identifier) identifies the individual record within the record type. For entity-backed records, record ID is the primary key in the data store entity. For process-backed records, record ID is the ID for the process. For service-backed records, record ID is the value returned to the ID field of the DataSubset produced by the record's source expression. dashboard: The URL of the dashboard to open for the record. Default is ""summary"". The URL Stub for each configured record view can be found on the record type object's Views page. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. openLinkIn: (Browser-Only) Determines where the linked content should open. Valid values: ""SAME_TAB"" (default), ""NEW_TAB"". "
a!pickerFieldRecords(),"a!pickerFieldRecords(label, labelPosition, instructions, helpTooltip, placeholder, maxSelections, recordType, filters, value, saveInto, required, requiredMessage, readOnly, disabled, validations, validationGroup, accessibilityText, showWhen, showRecordLinks)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". placeholder: Text to display in the field when it is empty. Does not show if the field is read only. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. recordType: Required, singular. Filters picker to select records of this type. filters: A single logical expression or a list of query filters can be provided to apply additional filters to the record set. Queries inherit the default filters defined on the referenced record type. Service-backed record types can only be filtered using a logical expression if data sync is enabled. value: Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected. saveInto: One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. showRecordLinks: Determines whether selected records display links to their summary views. Default: true. "
a!pickerFieldRecords_22r1(),"a!pickerFieldRecords_22r1(label, labelPosition, instructions, helpTooltip, placeholder, maxSelections, recordType, filters, value, saveInto, required, requiredMessage, readOnly, disabled, validations, validationGroup, accessibilityText, showWhen, showRecordLinks)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". placeholder: Text to display in the field when it is empty. Does not show if the field is read only. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. recordType: Required, singular. Filters picker to select records of this type. filters: List of filters to apply when searching for records. value: Array of currently selected records. This will be either a List of Text or a List of Number (Integer), depending on the recordType selected. saveInto: One or more variables that are updated with the array of selected records when the user selects or removes a record. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. showRecordLinks: Determines whether selected records display links to their summary views. Default: true. "
a!reportLink(),"a!reportLink(label, report, showWhen, openLinkIn)","label: Text associated with this link. report: The linked report or task report. showWhen: Determines whether the link is displayed in the component. When set to false, the component is hidden and is not evaluated. Default: true. openLinkIn: (Browser-Only) Determines where the linked content should open. Valid values: ""SAME_TAB"" (default), ""NEW_TAB"". "
a!richTextDisplayField(),"a!richTextDisplayField(label, labelPosition, instructions, align, value, helpTooltip, accessibilityText, showWhen, preventWrapping, tooltip, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. align: Determines alignment of the text value. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". Does not apply to lists. value: Array of rich text to display. Create rich text using a combination of text, a!richTextItem(), a!richTextHeader(), a!richTextImage(), a!richTextIcon(), a!richTextBulletedList(), or a!richTextNumberedList(). Example: {""Hello "", a!richTextItem(text: ""World"", style: ""STRONG""), ""!""}. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. preventWrapping: Determines if wrapping to multiple lines will be prevented. When set to true, each header, paragraph, or list item will truncate to a single line. Default: false. tooltip: Text to display on mouseover (web) or long press (mobile). marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!scatterChartField(),a!scatterChartField(datalabelinstructionsxAxisTitleyAxisTitleyAxisMinyAxisMaxxAxisMinxAxisMaxreferenceLinesshowDataLabelsshowTooltipsshowLegendallowDecimalAxisLabelslabelPositionhelpTooltipaccessibilityTextshowWhencolorSchemeheightxAxisStyleyAxisStylerefreshAlwaysrefreshIntervalrefreshOnReferencedVarChangerefreshOnVarChangerefreshAfterprimaryGroupingsecondaryGroupingxAxisMeasureyAxisMeasuresortdataLimitlink),"data: Reference to a synced record type or unsynced database-backed record type used as the source of the chart. Can accept a!recordData or a record type reference. label: Text to display as the field label. instructions: Supplemental text about the chart. xAxisTitle: Title for the horizontal axis. yAxisTitle: Title for the vertical axis. xAxisMin: Determines the minimum displayed point on the horizontal axis. xAxisMax: Determines the maximum displayed point on the horizontal axis. yAxisMin: Determines the minimum displayed point on the vertical axis. yAxisMax: Determines the maximum displayed point on the vertical axis. referenceLines: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine(). showDataLabels: Determines if data values are displayed next to each data point. Default: false. showLegend: When a secondary grouping is used, determines if a color legend displays below the chart. Default: true. showTooltips: Determines if a tooltip displays the data value for each data point. Default: true. allowDecimalAxisLabels: Allows values to display as decimal numbers instead of integers. Default: false. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. colorScheme: Determines which color scheme to use in the chart. Use one of the following valid values: ""CLASSIC"" (default), ""MIDNIGHT"", ""OCEAN"", ""MOSS"", ""BERRY"", ""PARACHUTE"", ""RAINFOREST"", ""SUNSET"" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples. height: Determines the chart height. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". xAxisStyle: Determines how to display the labels and axis separators for the X-Axis. Valid values: ""STANDARD"" (default), ""NONE"". yAxisStyle: Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: ""STANDARD"" (default), ""MINIMAL"", ""NONE"". refreshAlways: When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false. refreshInterval: How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: ""0.5"", ""1"", ""2"", ""3"", ""4"", ""5"", ""10"", ""30"", and ""60"". refreshOnReferencedVarChange: When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. refreshOnVarChange: Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}). refreshAfter: Refreshes chart data each time a specified event completes. Valid values: ""RECORD_ACTION"". primaryGrouping: Defines the field labels to display on the points in the chart. Configured using a!grouping(). secondaryGrouping: Defines the field labels to display on the points in the chart. Configured using a!grouping(). xAxisMeasure: Defines the numerical calculations for the x-axis of the chart. Configured using a!measure(). yAxisMeasure: Defines the numerical calculations for the y-axis of the chart. Configured using a!measure(). sort: Use a!sortInfo() to define a sort in ascending or descending order. Use the alias of any groupings or measures to sort by the values in the chart. Use a record field or related record field reference to sort by data that is not referenced in the chart. dataLimit: Maximum number of data points to display on the chart. Default: 5000. Valid values: 1-5000. link: Link to execute when a user selects a data point on the chart. Use fv!selection to pass context from the selection made on the chart to the link. Create a link using a!dynamicLink(). "
a!sectionLayout(),"a!sectionLayout(label, contents, validations, validationGroup, isCollapsible, isInitiallyCollapsed, showWhen, divider, marginBelow, accessibilityText, labelIcon, iconAltText, labelSize, labelHeadingTag, labelColor, dividerColor, dividerWeight, marginAbove)","label: Text to display as the section's title. contents: Components and layouts to display in the section body. validations: Validation errors to display above the section. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. isCollapsible: Determines if an expand/collapse control appears in the section label. Default is false. isInitiallyCollapsed: Determines if the section is collapsed when the interface first loads. Default is false. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. divider: Determines where a divider appears within the section. Valid values: ""NONE"" (default), ""ABOVE"", ""BELOW"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. labelIcon: Icon to display next to the label. For a list of available icons, see the Styled Icon component. iconAltText: Equivalent alternate text for use by screen readers. labelSize: Determines the label size. Valid values: ""LARGE_PLUS"", ""LARGE"", ""MEDIUM_PLUS"", ""MEDIUM"" (default), ""SMALL"", ""EXTRA_SMALL"". labelHeadingTag: Determines the heading tag associated with the label for use by screen readers; produces no visible change. Valid values: ""H1"", ""H2"", ""H3"", ""H4"", ""H5"", ""H6"". The default is dependent on the chosen label size. For more information on header tags, see our header accessibility guidance. labelColor: Determines the label color. Valid values: Any valid hex color or ""ACCENT"" (default), ""STANDARD"", ""POSITIVE"", ""NEGATIVE"", ""SECONDARY"". dividerColor: Determines the divider line color. Valid values: Any valid hex color or ""SECONDARY"" (default), ""STANDARD"", ""ACCENT"". dividerWeight: Determines the divider line thickness. Valid values: ""THIN"" (default), ""MEDIUM"", ""THICK"". marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". "
a!sideBySideItem(),"a!sideBySideItem(item, width, showWhen)","item: The component to display inside the layout. width: Determines the amount of space allocated to each of the items in the row. Valid values: ""AUTO"" (default), ""MINIMIZE"", ""1X"", ""2X"", ""3X"", ""4X"", ""5X"", ""6X"", ""7X"", ""8X"", ""9X"", and ""10X"". showWhen: Determines whether the component or layout is displayed on the interface. When set to false, the component or layout is hidden and is not evaluated. Default: true. "
a!sideBySideLayout(),"a!sideBySideLayout(items, alignVertical, showWhen, spacing, marginBelow, stackWhen, marginAbove)","items: List of items that are displayed in the layout. Accepts a!sideBySideItem. alignVertical: Determines vertical alignment of all content within the layout. Valid values are ""TOP"" (default), ""MIDDLE"", and ""BOTTOM"". showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. spacing: Determines the space between columns in the layout when they are not stacked. Valid values: ""STANDARD"" (default), ""NONE"", ""DENSE"", ""SPARSE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". stackWhen: Determines the page width at which side by side items stack vertically. List all widths where items should stack. Valid values: ""PHONE"", ""TABLET_PORTRAIT"", ""TABLET_LANDSCAPE"", ""DESKTOP_NARROW"", ""DESKTOP"", ""DESKTOP_WIDE"", ""NEVER"" (default). marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". "
a!signatureField(),"a!signatureField(label, labelPosition, instructions, helpTooltip, target, fileName, fileDescription, value, saveInto, required, requiredMessage, buttonStyle, buttonSize, readOnly, disabled, validationGroup, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". target: Determines the eventual location of the saved signature file. fileName: Determines the name for the signature file. When not provided, the timestamp will be used. fileDescription: Determines the description for the signature file. When not provided, the description of the new file is empty. value: The signature file associated with this field. saveInto: Variable that is updated with the signature file when the user saves a signature. Removing a signature file removes the document and saves a null. Use a!save() to save a modified or alternative value to a variable. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the value of the field is required but not provided. buttonStyle: Determines the style of the signature button. Valid values: ""PRIMARY"", ""SECONDARY"" (default), ""STANDARD"", ""LINK"". buttonSize: Determines the size of the signature button. Valid values: ""SMALL"" (default), ""STANDARD"", ""LARGE"". readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. When a signature is present in this state, it may not be deleted. Default: false. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!stampField(),"a!stampField(label, labelPosition, instructions, helpTooltip, icon, text, backgroundColor, contentColor, size, align, tooltip, showWhen, accessibilityText, link, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". icon: Icon to display inside the stamp. See the documentation for details. text: Text to display within the stamp. backgroundColor: Determines the background color. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""NEGATIVE"", ""SECONDARY"", ""TRANSPARENT"". If ""TRANSPARENT"" is selected, the circle border will take on the content color and the circle fill will be transparent. contentColor: Determines the icon color. Valid values: Any hex color or ""STANDARD"" (default), ""ACCENT"", ""POSITIVE"", ""NEGATIVE"". size: Determines the size of the stamp. Valid values: ""TINY"", ""SMALL"", ""MEDIUM"" (default), ""LARGE"". align: Determines alignment of the stamp. Valid values: ""START"", ""CENTER"" (default), ""END"". tooltip: Text to display on mouseover (web) or tap (mobile). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. link: Link to apply to the stamp. Create a link with a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), a!userRecordLink(), or a!authorizationLink(). marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!startProcessLink(),"a!startProcessLink(label, processModel, processParameters, bannerMessage, showWhen)","label: Text associated with this link. processModel: The process model to start. You must provide a constant referencing the process model or a process model UUID. processParameters: A dictionary containing the parameters for the process model and their values. bannerMessage: The text shown in the banner when a process starts successfully after completing any initial chained forms. When not provided, no banner is displayed. showWhen: Determines whether the link is displayed in the component. When set to false, the link is hidden and is not evaluated. Default: true. "
a!richTextIcon(),"a!richTextIcon(icon, altText, caption, size, color, link, linkStyle, showWhen)","icon: The key of the icon to display. See Available Icons below. altText: Equivalent alternate text to display when accessibility or browser compatibility issues prevent the icon from displaying. caption: Text to display in mouseovers. size: Determines the icon size. Valid values: ""STANDARD"" (default), ""SMALL"", ""MEDIUM"", ""MEDIUM_PLUS"", ""LARGE"", ""LARGE_PLUS"", and ""EXTRA_LARGE"". color: Determines the icon color. Valid values: Any hex color or ""STANDARD"" (default), ""ACCENT"", ""POSITIVE"", ""NEGATIVE"", and ""SECONDARY"". link: Link that determines the behavior of the icon when clicked. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() linkStyle: Determines how the link is underlined. Valid values: ""INLINE"" (default), ""STANDALONE"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!richTextItem(),"a!richTextItem(text, style, size, color, link, linkStyle, showWhen)","text: Array of text to display as a rich text item. style: Determines the style to apply to the text value. Valid values include ""PLAIN"" (default), ""EMPHASIS"", ""STRONG"", and ""UNDERLINE"". size: Determines the text size. Valid values: ""STANDARD"" (default), ""SMALL"", ""MEDIUM"", ""MEDIUM_PLUS"", ""LARGE"", ""LARGE_PLUS"", ""EXTRA_LARGE"". color: Determines the text color. Valid values: Any valid hex color or ""STANDARD"" (default), ""ACCENT"", ""POSITIVE"", ""NEGATIVE"", ""SECONDARY"". link: Link to apply to the text. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink().' linkStyle: Determines how the link is underlined. Valid values: ""INLINE"" (default), ""STANDALONE"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!submitLink(),"a!submitLink(label, confirmMessage, confirmButtonStyle, value, saveInto, skipValidation, validationGroup, confirmHeader, confirmButtonLabel, cancelButtonLabel, showWhen)","label: Text associated with this link. confirmMessage: Text to display in an optional confirmation dialog where a null argument disables the confirmation dialog and a text argument enables it with the text entered as the confirmation message. confirmButtonStyle: Determines the style of the primary button in the confirmation dialog. Valid values: ""PRIMARY"" (default),""DESTRUCTIVE"". value: Value to be saved when the link is clicked. saveInto: One or more variables that are updated with the link value when the user clicks it. Use a!save() to save a modified or alternative value to a variable. skipValidation: When true, submit without performing validation. Default: false. validationGroup: When present, this field is only validated when a button in the same validation group is clicked. confirmHeader: Text to display at the top of the confirmation dialog. confirmButtonLabel: Text to display on the confirm button. Default: ""Yes"". cancelButtonLabel: Text to display on the cancel button. Default: ""No"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!tagField(),"a!tagField(label, labelPosition, instructions, helpTooltip, tags, align, accessibilityText, size, showWhen, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". tags: List of tags to display. Configured using a!tagItem(). align: Determines alignment of the image(s). Valid values: ""START"", ""CENTER"", ""END"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. size: Determines the size of the tags. Valid values: ""SMALL"", ""STANDARD"" (default). showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!tagItem(),"a!tagItem(text, backgroundColor, textColor, tooltip, showWhen, recordLink)","text: Text to display within the tag. The tag displays a maximum of 40 characters. backgroundColor: Determines the background color. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""NEGATIVE"", ""SECONDARY"" textColor: Determines the text color. Valid values: Any valid hex color or ""STANDARD"" (default). tooltip: Text to display as a tooltip on the tag. showWhen: Determines whether the tag is displayed on the interface. When set to false, the tag is hidden and is not evaluated. Default: true. recordLink: The record link to apply to the tag. Create a link with a!recordLink() or a!userRecordLink(). "
a!textField(),"a!textField(label, instructions, required, readOnly, disabled, value, validations, saveInto, refreshAfter, validationGroup, requiredMessage, align, labelPosition, placeholder, helpTooltip, masked, accessibilityText, showWhen, inputPurpose, characterLimit, showCharacterCount)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. value: Text to display in the text field. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable. refreshAfter: Determines when the interface is refreshed with the saved value from the barcode field. Valid values are ""KEYPRESS"" to refresh after every character typed into the field and ""UNFOCUS"" (the default value) to refresh when the user deselects the field after changing its value. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. align: Determines alignment of the text value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: ""LEFT"", ""CENTER"", ""RIGHT"". labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". masked: Determines if the value is obscured from view. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. inputPurpose: Indicates the intent of input for accessibility improvements, like autocomplete, used by browsers and assistive technologies. Valid values are ""NAME"", ""EMAIL"", ""PHONE_NUMBER"", ""STREET_ADDRESS"", ""POSTAL_CODE"", ""CREDIT_CARD_NUMBER"", and ""OFF"". characterLimit: Determines the maximum number of characters. Depending on the language, some characters may count as more than one. showCharacterCount: Determines if the character count displays on the text field. Only applicable if the character limit is set. Default: true. "
a!timeDisplayField(),"a!timeDisplayField(label, instructions, value, labelPosition, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. value: The time to display. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!hierarchyBrowserFieldTree(),"a!hierarchyBrowserFieldTree(label, labelPosition, instructions, helpTooltip, pathValue, pathSaveInto, nodeConfigs, nextLevelValues, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". pathValue: The first value in the pathValue array appears in the uppermost level of the tree and is the root of the visible hierarchy. As the user clicks through the browser, clicked nodes become highlighted. These clicked nodes' values are in the pathValue. They should be stored in a variable, for example local!path. A clicked node's value is used to determine the next level, generated by nextLevelValues. The pathValue must have a default value. pathSaveInto: Variable or list of variables to update when a user clicks on a drillable node, as determined by the node configurations. For example, local!path. Use a!save() to save a modified or alternative value to a variable. nodeConfigs: Describe how to display a value as a node using a!hierarchyBrowserFieldTreeNode() and fv!nodeValue. This rule or expression is evaluated for each value where fv!nodeValue is any node value. nextLevelValues: Given a node value, describe how to get the next level’s values using the variable fv!nodeValue. For example, rule!CRM_getCustomerUsersBySupervisor(customer: fv!nodeValue, isActive: true). This rule or expression is evaluated for each value in pathValue where fv!nodeValue refers any value in pathValue. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!hierarchyBrowserFieldTreeNode(),"a!hierarchyBrowserFieldTreeNode(id, label, description, details, image, link, isDrillable, nextLevelCount, showWhen)","id: Required unique identifier of the node. This value only needs to be unique within the nodes level. label: Required text to display in the node. description: Text to display below the node label. details: Text to display below the node description. image: Required image to display in the node, created with: a!documentImage() a!userImage() a!webImage() link: Optional link to display in the node s label title. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() isDrillable: If true, clicking the node will drill into it, saving the tree browsers navigation path and revealing another level to the user. If false, clicking the node's will not reveal another level, but the navigation path will still be saved (default: true). nextLevelCount: Optional count of nodes that would be displayed in the next level were this node in the navigation path. showWhen: Determines whether the component is displayed on the interface. When set to false the component is hidden and is not evaluated. Default: true. "
a!userBrowserFieldColumns(),"a!userBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootGroup, pathValue, pathSaveInto, selectionValue, selectionSaveInto, readOnly, height, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootGroup: The direct members of the initial group are displayed in the first column. pathValue: The path from the first column to the current navigation. pathSaveInto: Variable or list of variables to update when a user clicks on a user or group. selectionValue: This user is displayed as selected when it is present in the navigation path array. selectionSaveInto: Variable or list of variables to update upon selection of a user. readOnly: Determines whether selection is enabled. Default: false. height: Determines the height of the component.Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!userImage(),"a!userImage(user, altText, caption, link, showWhen)","user: The user whose profile photo will be shown. altText: Alternate text of the image used for the image's alt attribute and read by screen readers; see accessibility considerations for more information. caption: Text to display in mouseovers. link: Link that determines the behavior of an image when clicked. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() showWhen: Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true. "
a!pickerFieldUsers(),"a!pickerFieldUsers(label, instructions, required, requiredMessage, readOnly, disabled, maxSelections, groupFilter, value, validations, validationGroup, saveInto, labelPosition, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. groupFilter: When present, only users who are members of this group are suggested. value: Array of currently selected users. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. saveInto: One or more variables that are updated with the array of selected users when the user selects or removes a user. Use a!save() to save a modified or alternative value to a variable. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!userRecordLink(),"a!userRecordLink(label, user, view, showWhen, openLinkIn)","label: Text displayed as the link name the user clicks on. user: The User whose record is linked. view: The URL stub of the view to open for the record. Default is ""summary"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. openLinkIn: (Browser-Only) Determines where the linked content should open. Valid values: ""SAME_TAB"" (default), ""NEW_TAB"". "
a!userAndGroupBrowserFieldColumns(),"a!userAndGroupBrowserFieldColumns(label, labelPosition, instructions, helpTooltip, rootGroup, pathValue, pathSaveInto, selectionValue, selectionSaveInto, readOnly, height, accessibilityText, showWhen)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". rootGroup: The direct members of the initial group are displayed in the first column. pathValue: The path from the first column to the current navigation. pathSaveInto: Variable or list of variables to update when a user clicks on a user or group. selectionValue: This user or group is displayed as selected when it is present in the navigation path array. selectionSaveInto: Variable or list of variables to update upon selection of a user or group. readOnly: Determines whether selection is enabled. Default: false. height: Determines the height of the component.Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!pickerFieldUsersAndGroups(),"a!pickerFieldUsersAndGroups(label, instructions, required, readOnly, disabled, maxSelections, groupFilter, value, validations, saveInto, validationGroup, requiredMessage, labelPosition, placeholder, helpTooltip, accessibilityText, showWhen)","label: Text to display as the field label. instructions: Supplemental text about this field. required: Determines if a value is required to submit the form. Default: false. readOnly: Determines if the field should display as not editable. Default: false. disabled: Determines if the field should display as potentially editable but grayed out. Default: false. maxSelections: Maximum number of allowed selections. Once this number is reached, further selections are blocked until a selection is removed. groupFilter: When present, only users or groups which are members of this group are suggested. value: Array of currently selected users or groups. validations: Validation errors to display below the field when the value is not null. saveInto: One or more variables that are updated with the array of selected users or groups when the user selects or removes a user or group. Use a!save() to save a modified or alternative value to a variable. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups. requiredMessage: Custom message to display when the field's value is required and not provided. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. placeholder: Text to display in the field when it is empty. Does not show if the field is read only. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!videoField(),"a!videoField(label, labelPosition, instructions, videos, helpTooltip, accessibilityText, showWhen, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. videos: Array of videos to display, created with a!webVideo(). helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!webContentField(),"a!webContentField(label, labelPosition, instructions, helpTooltip, showWhen, source, showBorder, height, altText, disabled, accessibilityText, marginAbove, marginBelow)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default) Displays the label above the component. ""ADJACENT"" Displays the label to the left of the component. ""COLLAPSED"" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information. ""JUSTIFIED"" Aligns the label alongside the component starting at the edge of the page. instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is ""COLLAPSED"". showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. source: Location of the external content. showBorder: Determines whether the field has an outer border. Default: false. height: Determines the layout height. Valid values: ""SHORT"", ""MEDIUM"" (default), ""TALL"". altText: Equivalent alternate text provided to assistive technology. disabled: Determines if the user is prevented from interacting with the web content. Default: false. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD"" (default), ""MORE"", ""EVEN_MORE"". "
a!webImage(),"a!webImage(source, altText, caption, link, showWhen)","source: Location of the image. See SafeURI. altText: Alternate text of the image used for the image s alt attribute and read by screen readers; see accessibility considerations for more information. caption: Optional text to display in the mouseover text for the image and when the images is viewed in slideshow mode. link: Link that determines the behavior of an image when clicked. Create links with: a!authorizationLink() a!documentDownloadLink() a!dynamicLink() a!newsEntryLink() a!processTaskLink() a!recordLink() a!reportLink() a!startProcessLink() a!submitLink() a!userRecordLink() a!safeLink() showWhen: Determines whether the image is displayed in the component. When set to false, the image is hidden and is not evaluated. Default: true. "
a!safeLink(),"a!safeLink(label, uri, showWhen, openLinkIn)","label: Text displayed as the link name the user clicks on. uri: URI target of the hyperlink. See SafeURI. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. openLinkIn: (Browser-Only) Determines where the linked content should open. Valid values: ""SAME_TAB"", ""NEW_TAB"" (default). "
a!webVideo(),"a!webVideo(source, tooltip, showWhen)","source: Location of the video. See SafeURI. tooltip: Optional text to display in the mouseover text for the video. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!authorizationLink(),"a!authorizationLink(label, connectedSystem, showWhen)","label: Text displayed as the link name the user clicks on. connectedSystem: Connected system used to generate the authorization link. Provide the connected system value returned by an integration when the response indicates that the user needs to authorize. showWhen: Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true. "
a!barOverlay(),"a!barOverlay(position, contents, showWhen, style, padding)","position: Determines where the bar overlay appears. Valid values: ""TOP"", ""MIDDLE"", ""BOTTOM"" (default). contents: The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side. showWhen: Determines whether the overlay is displayed on the interface. When set to false, the overlay is hidden and is not evaluated. Default: true. style: Determines the overlay style. Valid values: ""DARK"" (default), ""SEMI_DARK"", ""NONE"", ""SEMI_LIGHT"", ""LIGHT"". padding: Determines the space between the overlay's edges and its contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD""(default), ""MORE"", ""EVEN_MORE"". "
a!cardTemplateBarTextStacked(),"a!cardTemplateBarTextStacked(id, primaryText, secondaryText, icon, iconColor, iconAltText, tooltip, showWhen)","id: Value that identifies the card. primaryText: Optional text to display on the first line inside the card. secondaryText: Optional text to display beneath the primary text inside the card. icon: Icon to display inside the card. iconColor: Determines the icon color. Valid values: Any hex color or ""ACCENT"" (default), ""STANDARD"", ""SECONDARY"", ""POSITIVE"", ""NEGATIVE"". iconAltText: Equivalent alternate text for use by screen readers. tooltip: Text to display on mouseover (web) or tap (mobile). showWhen: Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true. "
a!cardChoiceField(),"a!cardChoiceField(label, labelPosition, instructions, helpTooltip, data, sort, cardTemplate, value, saveInto, maxSelections, align, showShadow, required, requiredMessage, disabled, validations, validationGroup, showWhen, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"", ""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is ""COLLAPSED"". data: The data to display in cards. Use a record type reference or a!recordData() to source your data from records. For other cases, you can use a query, such as a!queryEntity(), a Data Subset, a list of map or dictionary, or a list of data. When using a query that returns a DataSubset, you must specify fetchTotalCount as true. sort: Array of Sort Info configurations created with a!sortInfo(). cardTemplate: Determines how a card should be displayed on the interface. Create using: a!cardTemplateTile() a!cardTemplateBarTextJustified() a!cardTemplateBarTextStacked() Access data in cards by using fv!data with dot notation, such as fv!data.id, or other function variables: fv!index fv!identifier fv!isFirst fv!isLast Cards that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!data[recordType!Case.fields.caseName]. value: Value of choice card to display as selected. saveInto: One or more variables that are updated when a card is selected. Use a!save() to save a modified or alternative value to a variable. maxSelections: Maximum number of allowed selections. For maximum selections greater than 1, a validation message will appear once the number is exceeded. align: Determines alignment of the card(s). Valid values: ""START"", ""CENTER"" (default), ""END"". showShadow: Determines whether cards have an outer shadow. Default: false. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the cards should display as potentially selectable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. showWhen: Determines whether the cards are displayed on the interface. When set to false, the cards are hidden and are not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!cardTemplateBarTextJustified(),"a!cardTemplateBarTextJustified(id, primaryText, secondaryText, icon, iconColor, iconAltText, tooltip, showWhen)","id: Value that identifies the card. primaryText: Optional text to display on the first line inside the card. secondaryText: Optional text to display beneath the primary text inside the card. icon: Icon to display inside the card. iconColor: Determines the icon color. Valid values: Any hex color or ""ACCENT"" (default), ""STANDARD"", ""SECONDARY"", ""POSITIVE"", ""NEGATIVE"". iconAltText: Equivalent alternate text for use by screen readers. tooltip: Text to display on mouseover (web) or tap (mobile). showWhen: Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true. "
a!cardChoiceField(),"a!cardChoiceField(label, labelPosition, instructions, helpTooltip, data, sort, cardTemplate, value, saveInto, maxSelections, align, showShadow, required, requiredMessage, disabled, validations, validationGroup, showWhen, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"", ""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is ""COLLAPSED"". data: The data to display in cards. Use a record type reference or a!recordData() to source your data from records. For other cases, you can use a query, such as a!queryEntity(), a Data Subset, a list of map or dictionary, or a list of data. When using a query that returns a DataSubset, you must specify fetchTotalCount as true. sort: Array of Sort Info configurations created with a!sortInfo(). cardTemplate: Determines how a card should be displayed on the interface. Create using: a!cardTemplateTile() a!cardTemplateBarTextJustified() a!cardTemplateBarTextStacked() Access data in cards by using fv!data with dot notation, such as fv!data.id, or other function variables: fv!index fv!identifier fv!isFirst fv!isLast Cards that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!data[recordType!Case.fields.caseName]. value: Value of choice card to display as selected. saveInto: One or more variables that are updated when a card is selected. Use a!save() to save a modified or alternative value to a variable. maxSelections: Maximum number of allowed selections. For maximum selections greater than 1, a validation message will appear once the number is exceeded. align: Determines alignment of the card(s). Valid values: ""START"", ""CENTER"" (default), ""END"". showShadow: Determines whether cards have an outer shadow. Default: false. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the cards should display as potentially selectable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. showWhen: Determines whether the cards are displayed on the interface. When set to false, the cards are hidden and are not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!cardChoiceField(),"a!cardChoiceField(label, labelPosition, instructions, helpTooltip, data, sort, cardTemplate, value, saveInto, maxSelections, align, showShadow, required, requiredMessage, disabled, validations, validationGroup, showWhen, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"", ""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is ""COLLAPSED"". data: The data to display in cards. Use a record type reference or a!recordData() to source your data from records. For other cases, you can use a query, such as a!queryEntity(), a Data Subset, a list of map or dictionary, or a list of data. When using a query that returns a DataSubset, you must specify fetchTotalCount as true. sort: Array of Sort Info configurations created with a!sortInfo(). cardTemplate: Determines how a card should be displayed on the interface. Create using: a!cardTemplateTile() a!cardTemplateBarTextJustified() a!cardTemplateBarTextStacked() Access data in cards by using fv!data with dot notation, such as fv!data.id, or other function variables: fv!index fv!identifier fv!isFirst fv!isLast Cards that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!data[recordType!Case.fields.caseName]. value: Value of choice card to display as selected. saveInto: One or more variables that are updated when a card is selected. Use a!save() to save a modified or alternative value to a variable. maxSelections: Maximum number of allowed selections. For maximum selections greater than 1, a validation message will appear once the number is exceeded. align: Determines alignment of the card(s). Valid values: ""START"", ""CENTER"" (default), ""END"". showShadow: Determines whether cards have an outer shadow. Default: false. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the cards should display as potentially selectable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. showWhen: Determines whether the cards are displayed on the interface. When set to false, the cards are hidden and are not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!cardTemplateTile(),"a!cardTemplateTile(id, primaryText, secondaryText, icon, iconColor, iconAltText, tooltip, showWhen)","id: Value that identifies the card. primaryText: Optional text to display on the first line inside the card. secondaryText: Optional text to display beneath the primary text inside the card. icon: Icon to display inside the card. iconColor: Determines the icon color. Valid values: Any hex color or ""ACCENT"" (default), ""STANDARD"", ""SECONDARY"", ""POSITIVE"", ""NEGATIVE"". iconAltText: Equivalent alternate text for use by screen readers. tooltip: Text to display on mouseover (web) or tap (mobile). showWhen: Determines whether the card is displayed in the set of card choices. When set to false, the card is hidden. Default: true. "
a!cardChoiceField(),"a!cardChoiceField(label, labelPosition, instructions, helpTooltip, data, sort, cardTemplate, value, saveInto, maxSelections, align, showShadow, required, requiredMessage, disabled, validations, validationGroup, showWhen, accessibilityText)","label: Text to display as the field label. labelPosition: Determines where the label appears. Valid values: ""ABOVE"" (default), ""ADJACENT"", ""JUSTIFIED"", ""COLLAPSED"". instructions: Supplemental text about this field. helpTooltip: Displays a help icon with the specified text as a tooltip. The help icon does not show when the label position is ""COLLAPSED"". data: The data to display in cards. Use a record type reference or a!recordData() to source your data from records. For other cases, you can use a query, such as a!queryEntity(), a Data Subset, a list of map or dictionary, or a list of data. When using a query that returns a DataSubset, you must specify fetchTotalCount as true. sort: Array of Sort Info configurations created with a!sortInfo(). cardTemplate: Determines how a card should be displayed on the interface. Create using: a!cardTemplateTile() a!cardTemplateBarTextJustified() a!cardTemplateBarTextStacked() Access data in cards by using fv!data with dot notation, such as fv!data.id, or other function variables: fv!index fv!identifier fv!isFirst fv!isLast Cards that use record data must use the recordType! domain to reference a record field or related record field. For example, fv!data[recordType!Case.fields.caseName]. value: Value of choice card to display as selected. saveInto: One or more variables that are updated when a card is selected. Use a!save() to save a modified or alternative value to a variable. maxSelections: Maximum number of allowed selections. For maximum selections greater than 1, a validation message will appear once the number is exceeded. align: Determines alignment of the card(s). Valid values: ""START"", ""CENTER"" (default), ""END"". showShadow: Determines whether cards have an outer shadow. Default: false. required: Determines if a value is required to submit the form. Default: false. requiredMessage: Custom message to display when the field's value is required and not provided. disabled: Determines if the cards should display as potentially selectable but grayed out. Default: false. validations: Validation errors to display below the field when the value is not null. validationGroup: When present, this field is only validated when a button in the same validation group is pressed. See this recipe for more information about how to use validation groups. showWhen: Determines whether the cards are displayed on the interface. When set to false, the cards are hidden and are not evaluated. Default: true. accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. "
a!cardLayout(),"a!cardLayout(contents, link, height, style, showBorder, showShadow, tooltip, showWhen, marginBelow, accessibilityText, padding, shape, marginAbove, decorativeBarPosition, decorativeBarColor)","contents: Components and layouts to display within the card. link: Link to apply to the card. Create a link with a!documentDownloadLink(), a!dynamicLink(), a!newsEntryLink(), a!processTaskLink(), a!recordLink(), a!reportLink(), a!safeLink(), a!startProcessLink(), a!submitLink(), a!userRecordLink(), or a!authorizationLink(). height: Determines the card height. Valid values: ""EXTRA_SHORT"", ""SHORT"", ""SHORT_PLUS"", ""MEDIUM"", ""MEDIUM_PLUS"", ""TALL"", ""TALL_PLUS"", ""EXTRA_TALL"", ""AUTO""(default). style: Determines the card background color. Valid values: Any valid hex color or ""NONE"" (default), ""TRANSPARENT"", ""STANDARD"", ""ACCENT"", ""SUCCESS"", ""INFO"", ""WARN"", ""ERROR"", ""CHARCOAL_SCHEME"", ""NAVY_SCHEME"", ""PLUM_SCHEME"". showBorder: Determines whether the layout has an outer border. Default: true. showShadow: Determines whether the layout has an outer shadow. Default: false. tooltip: Text to display on mouseover. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. marginBelow: Determines how much space is added below the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". accessibilityText: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change. padding: Determines the space between the card edges and its contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"" (default), ""STANDARD"", ""MORE"", ""EVEN_MORE"". shape: Determines the card shape. Valid values: ""SQUARED"" (default), ""SEMI_ROUNDED"", ""ROUNDED"". marginAbove: Determines how much space is added above the layout. Valid values: ""NONE"" (default), ""EVEN_LESS"", ""LESS"", ""STANDARD"", ""MORE"", ""EVEN_MORE"". decorativeBarPosition: Determines where the decorative bar displays. Valid values: ""TOP"", ""BOTTOM"", ""START"", ""END"", ""NONE"" (default). decorativeBarColor: Determines the decorative bar color. Valid values: Any valid hex color or ""ACCENT"" (default), ""POSITIVE"", ""WARN"", ""NEGATIVE"". "
a!columnOverlay(),"a!columnOverlay(alignVertical, position, width, contents, showWhen, style, padding)","alignVertical: Determines vertical alignment of all content within the overlay. Valid values: ""TOP"" (default), ""MIDDLE"", and ""BOTTOM"". position: Determines where the column overlay appears. Valid values: ""START"" (default), ""CENTER"", ""END"". width: Determines the column overlay width. Valid values: ""NARROW"", ""MEDIUM"" (default), ""WIDE"". contents: The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side. showWhen: Determines whether the overlay is displayed on the interface. When set to false, the overlay is hidden and is not evaluated. Default: true. style: Determines the overlay style. Valid values: ""DARK"" (default), ""SEMI_DARK"", ""NONE"", ""SEMI_LIGHT"", ""LIGHT"". padding: Determines the space between the overlay's edges and its contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD""(default), ""MORE"", ""EVEN_MORE"". "
a!fullOverlay(),"a!fullOverlay(alignVertical, contents, showWhen, style, padding)","alignVertical: Determines vertical alignment of all content within the overlay. Valid values: ""TOP"" (default), ""MIDDLE"", and ""BOTTOM"". contents: The interface to display in the overlay. Accepts layouts and display components. Supported layouts and components: Box, Button, Card, Columns, Image, Link, Milestone, Progress Bar, Rich Text, Section, Side By Side. showWhen: Determines whether the layout is displayed on the interface. When set to false, the layout is hidden and is not evaluated. Default: true. style: Determines the overlay style. Valid values: ""DARK"" (default), ""SEMI_DARK"", ""NONE"", ""SEMI_LIGHT"", ""LIGHT"". padding: Determines the space between the overlay's edges and its contents. Valid values: ""NONE"", ""EVEN_LESS"", ""LESS"", ""STANDARD""(default), ""MORE"", ""EVEN_MORE"". "
